function Resampler(fromSampleRate,toSampleRate,channels,inputBuffer){if(this.fromSampleRate=+fromSampleRate,this.toSampleRate=+toSampleRate,this.channels=0|channels,"object"!=typeof inputBuffer)throw new Error("inputBuffer is not an object.");if(!(inputBuffer instanceof Array||inputBuffer instanceof Float32Array||inputBuffer instanceof Float64Array))throw new Error("inputBuffer is not an array or a float32 or a float64 array.");this.inputBuffer=inputBuffer,this.initialize()}Resampler.prototype.initialize=function(){if(!(this.fromSampleRate>0&&this.toSampleRate>0&&this.channels>0))throw new Error("Invalid settings specified for the resampler.");this.fromSampleRate==this.toSampleRate?(this.resampler=this.bypassResampler,this.ratioWeight=1,this.outputBuffer=this.inputBuffer):(this.ratioWeight=this.fromSampleRate/this.toSampleRate,this.fromSampleRate<this.toSampleRate?(this.compileLinearInterpolationFunction(),this.lastWeight=1):(this.compileMultiTapFunction(),this.tailExists=!1,this.lastWeight=0),this.initializeBuffers())},Resampler.prototype.compileLinearInterpolationFunction=function(){for(var toCompile="var outputOffset = 0;    if (bufferLength > 0) {        var buffer = this.inputBuffer;        var weight = this.lastWeight;        var firstWeight = 0;        var secondWeight = 0;        var sourceOffset = 0;        var outputOffset = 0;        var outputBuffer = this.outputBuffer;        for (; weight < 1; weight += "+this.ratioWeight+") {            secondWeight = weight % 1;            firstWeight = 1 - secondWeight;",channel=0;channel<this.channels;++channel)toCompile+="outputBuffer[outputOffset++] = (this.lastOutput["+channel+"] * firstWeight) + (buffer["+channel+"] * secondWeight);";toCompile+="}        weight -= 1;        for (bufferLength -= "+this.channels+", sourceOffset = Math.floor(weight) * "+this.channels+"; sourceOffset < bufferLength;) {            secondWeight = weight % 1;            firstWeight = 1 - secondWeight;";for(channel=0;channel<this.channels;++channel)toCompile+="outputBuffer[outputOffset++] = (buffer[sourceOffset"+(channel>0?" + "+channel:"")+"] * firstWeight) + (buffer[sourceOffset + "+(this.channels+channel)+"] * secondWeight);";toCompile+="weight += "+this.ratioWeight+";            sourceOffset = Math.floor(weight) * "+this.channels+";        }";for(channel=0;channel<this.channels;++channel)toCompile+="this.lastOutput["+channel+"] = buffer[sourceOffset++];";toCompile+="this.lastWeight = weight % 1;    }    return outputOffset;",this.resampler=Function("bufferLength",toCompile)},Resampler.prototype.compileMultiTapFunction=function(){for(var toCompile="var outputOffset = 0;    if (bufferLength > 0) {        var buffer = this.inputBuffer;        var weight = 0;",channel=0;channel<this.channels;++channel)toCompile+="var output"+channel+" = 0;";for(toCompile+="var actualPosition = 0;        var amountToNext = 0;        var alreadyProcessedTail = !this.tailExists;        this.tailExists = false;        var outputBuffer = this.outputBuffer;        var currentPosition = 0;        do {            if (alreadyProcessedTail) {                weight = "+this.ratioWeight+";",channel=0;channel<this.channels;++channel)toCompile+="output"+channel+" = 0;";for(toCompile+="}            else {                weight = this.lastWeight;",channel=0;channel<this.channels;++channel)toCompile+="output"+channel+" = this.lastOutput["+channel+"];";for(toCompile+="alreadyProcessedTail = true;            }            while (weight > 0 && actualPosition < bufferLength) {                amountToNext = 1 + actualPosition - currentPosition;                if (weight >= amountToNext) {",channel=0;channel<this.channels;++channel)toCompile+="output"+channel+" += buffer[actualPosition++] * amountToNext;";for(toCompile+="currentPosition = actualPosition;                    weight -= amountToNext;                }                else {",channel=0;channel<this.channels;++channel)toCompile+="output"+channel+" += buffer[actualPosition"+(channel>0?" + "+channel:"")+"] * weight;";for(toCompile+="currentPosition += weight;                    weight = 0;                    break;                }            }            if (weight <= 0) {",channel=0;channel<this.channels;++channel)toCompile+="outputBuffer[outputOffset++] = output"+channel+" / "+this.ratioWeight+";";for(toCompile+="}            else {                this.lastWeight = weight;",channel=0;channel<this.channels;++channel)toCompile+="this.lastOutput["+channel+"] = output"+channel+";";toCompile+="this.tailExists = true;                break;            }        } while (actualPosition < bufferLength);    }    return outputOffset;",this.resampler=Function("bufferLength",toCompile)},Resampler.prototype.bypassResampler=function(upTo){return upTo},Resampler.prototype.initializeBuffers=function(){var outputBufferSize=Math.ceil(this.inputBuffer.length*this.toSampleRate/this.fromSampleRate/this.channels*1.0000004768371582)*this.channels+this.channels;try{this.outputBuffer=new Float32Array(outputBufferSize),this.lastOutput=new Float32Array(this.channels)}catch(error){this.outputBuffer=[],this.lastOutput=[]}};const uploadInput=document.getElementById("uploadInput"),masterSR=48e3,audioCtx=new AudioContext({sampleRate:masterSR});let files=[],unsorted=[],lastSort="",sliceGrid=0,shiftKeyDown=!1;const getFileById=id=>files.find((f=>f.meta.id===id)),getFileIndexById=id=>files.findIndex((f=>f.meta.id===id)),getRowElementById=id=>document.querySelector(`tr[data-id="${id}"]`);function setWavLink(file,linkEl){const wav=audioBufferToWav(file.buffer,file.meta),blob=new window.Blob([new DataView(wav)],{type:"audio/wav"});linkEl.href=URL.createObjectURL(blob),linkEl.setAttribute("download",file.file.name.replace(".syx",".wav"))}function downloadAll(){files.filter((f=>f.meta.checked)).forEach((file=>{setTimeout((()=>downloadFile(file.meta.id)),100)}))}function downloadFile(id){const el=getRowElementById(id).querySelector(".wav-link-hidden");setWavLink(getFileById(id),el),el.click()}function removeSelected(){files=files.filter((f=>!f.meta.checked)),unsorted=unsorted.filter((id=>files.find((f=>f.meta.id===id)))),renderList()}function showInfo(){const name=document.querySelector("meta[name=author]").content,description=document.querySelector("meta[name=description]").content;document.querySelector(".info-panel-md .content").innerHTML=`<h3>DigiChain</h3><p>${description}</p><p class="float-right">${name}</p>`,document.querySelector(".info-panel-md").style.display="block"}function joinAll(pad=!1){const _files=files.filter((f=>f.meta.checked));if(pad&&0!==sliceGrid&&_files.length<sliceGrid)for(;_files.length!==sliceGrid;)_files.push(_files[_files.length-1]);const largest=_files.reduce(((big,cur)=>big>cur.buffer.length?big:cur.buffer.length),0),totalLength=_files.reduce(((total,file)=>total+=pad?largest:file.buffer.length),0),audioArrayBuffer=audioCtx.createBuffer(1,totalLength,masterSR);let totalWrite=0;_files.forEach(((file,idx)=>{const bufferLength=pad?largest:file.buffer.length;let result=new Float32Array(file.buffer.length);if(file.meta.channel){if("L"===file.meta.channel&&(result=file.buffer.getChannelData(0)),"R"===file.meta.channel&&(result=file.buffer.getChannelData(1)),"S"===file.meta.channel)for(let i=0;i<file.buffer.length;i++)result[i]=(file.buffer.getChannelData(0)[i]+file.buffer.getChannelData(1)[i])/2}else result=file.buffer.getChannelData(0);for(let i=0;i<bufferLength;i++)audioArrayBuffer.getChannelData(0)[totalWrite]=result[i],totalWrite++}));const joinedEl=document.getElementById("getJoined");setWavLink({file:{name:"joined.wav"},buffer:audioArrayBuffer,meta:{}},joinedEl),joinedEl.click()}const playFile=id=>{const source=audioCtx.createBufferSource(),file=getFileById(id);source.buffer=file.buffer,source.connect(audioCtx.destination),source.start()},toggleCheck=id=>{const el=getRowElementById(id).querySelector(".toggle-check"),file=getFileById(id);file.meta.checked=!file.meta.checked,file.meta.checked?el.classList.remove("button-outline"):el.classList.add("button-outline"),document.getElementById("fileNum").textContent=`${files.length}/${files.filter((f=>f.meta.checked)).length}`},changeChannel=(id,channel)=>{const el=getRowElementById(id).querySelector(".channel-option-"+channel);getFileById(id).meta.channel=channel,getRowElementById(id).querySelectorAll(".channel-options a").forEach((opt=>opt.classList.remove("selected"))),el.classList.add("selected")},selectSliceAmount=size=>{sliceGrid=size,[0,4,8,16,32,64].forEach((option=>{const el=document.querySelector(`.sel-${option}`);option===size?el.classList.remove("button-outline"):el.classList.add("button-outline")})),files.forEach((f=>f.meta.checked=!1));for(let i=0;i<(size<files.length?size:files.length);i++)toggleCheck(files[i].meta.id);renderList()},duplicate=id=>{const file=getFileById(id),fileIdx=getFileIndexById(id),item=Object.assign({},file);item.meta=Object.assign({},file.meta),item.meta.dupeOf=id,item.waveform=!1,item.meta.id=crypto.randomUUID(),files.splice(shiftKeyDown?files.length:fileIdx+1,0,item),unsorted.push(item.meta.id),renderList()},remove=id=>{const fileIdx=getFileIndexById(id);files.splice(fileIdx,1);const unsortIdx=unsorted.findIndex((uuid=>uuid===id));unsorted.splice(unsortIdx,1),renderList()},move=(id,direction)=>{const from=getFileIndexById(id),to=1===direction?from+1:from-1,item=files.splice(from,1)[0];shiftKeyDown?from>to?files.splice(0,0,item):files.splice(files.length,0,item):files.splice(to,0,item),renderList()},sort=by=>{"id"===by?(files=unsorted.map((key=>files.find((f=>f.meta.id===key)))),lastSort=""):lastSort===by?files.reverse():(files="name"===by?files.sort(((a,b)=>a.file[by].localeCompare(b.file[by]))):files.sort(((a,b)=>a.meta[by].localeCompare(b.meta[by]))),lastSort=by),renderList()},draw=(normalizedData,id)=>{const drawLineSegment=(ctx,x,height,width,isEven)=>{ctx.lineWidth=1,ctx.strokeStyle="#a8a8a8",ctx.beginPath(),height=isEven?height:-height,ctx.moveTo(x,0),ctx.lineTo(x,height),ctx.arc(x+width/2,height,width/2,Math.PI,0,isEven),ctx.lineTo(x+width,0),ctx.stroke()},canvas=document.querySelector("canvas.waveform-"+id),dpr=window.devicePixelRatio||1;canvas.width=150,canvas.height=60;const ctx=canvas.getContext("2d");ctx.scale(dpr,dpr),ctx.translate(0,canvas.offsetHeight/2+0);const width=canvas.offsetWidth/normalizedData.length;for(let i=0;i<normalizedData.length;i++){const x=width*i;let height=normalizedData[i]/3*canvas.offsetHeight-0;height<0?height=0:height>canvas.offsetHeight/2&&(height=height>canvas.offsetHeight/2),drawLineSegment(ctx,x,height,width,(i+1)%2)}},renderList=()=>{const listEl=document.getElementById("fileList");listEl.innerHTML=files.map((f=>`\n      <tr data-id="${f.meta.id}">\n        <td>\n            <button onclick="toggleCheck('${f.meta.id}')" class="${f.meta.checked?"":"button-outline"} check toggle-check">&nbsp;</button>\n        </td>\n        <td>\n            <button title="Move up in sample list." onclick="move('${f.meta.id}', -1)" class="button-clear move-up"><i class="gg-chevron-up-r"></i></button>\n        </td>\n        <td>\n            <button title="Move down in sample list." onclick="move('${f.meta.id}', 1)" class="button-clear move-down"><i class="gg-chevron-down-r"></i></button>\n        </td>\n        <td>\n            <canvas onclick="playFile('${f.meta.id}')" class="waveform waveform-${f.meta.id}"></canvas>\n        </td>\n        <td>\n            <a title="Download processed wav file of sample." class="wav-link" onclick="downloadFile('${f.meta.id}')">${f.file.name.replace(/\.syx$|\.wav$/,"")}</a>${f.meta.dupeOf?" d":""}<a class="wav-link-hidden"></a>\n        </td>\n        <td>\n            <span>${f.meta.duration} s</span>\n        </td>\n        <td>\n            <div class="channel-options" style="display: ${f.buffer.numberOfChannels>1?"block":"none"}">\n            <a title="Left channel" onclick="changeChannel('${f.meta.id}', 'L')" class="${"L"===f.meta.channel?"selected":""} channel-option-L">L</a>\n            <a title="Sum to mono" onclick="changeChannel('${f.meta.id}', 'S')" class="${"S"===f.meta.channel?"selected":""} channel-option-S">S</a>\n            <a title="Right channel" onclick="changeChannel('${f.meta.id}', 'R')" class="${"R"===f.meta.channel?"selected":""} channel-option-R">R</a>\n            </div>\n        </td>\n        <td>\n            <button title="Duplicate sample." onclick="duplicate('${f.meta.id}')" class="button-clear duplicate"><i class="gg-duplicate"></i></button>\n        </td>\n        <td>\n            <button title="Remove sample (double-click)." ondblclick="remove('${f.meta.id}')" class="button-clear remove"><i class="gg-trash"></i></button>\n        </td>\n      </tr>\n    `)).join(""),0===files.length&&(listEl.innerHTML='<tr><td colspan="6" style="text-align: center;padding: 5rem; opacity: .25;"><h4>Load some samples to get started...</h4></td></tr>'),document.querySelectorAll(".waveform").forEach(((el,i)=>{files[i].waveform?el.replaceWith(files[i].waveform):(draw([...files[i].buffer.getChannelData(0)].filter(((x,i)=>!(i/50%1))),files[i].meta.id),files[i].waveform=el)})),document.getElementById("fileNum").textContent=`${files.length}/${files.filter((f=>f.meta.checked)).length}`},bytesToInt=(bh,bm,bl)=>((127&bh)<<7<<7)+((127&bm)<<7)+(127&bl),parseSds=(fd,file)=>{if(240!==fd[0]||126!==fd[1]||1!==fd[3]||247!==fd[20])return!1;const uuid=crypto.randomUUID(),bitRate=fd[6],sampleRate=10*Math.ceil(1e8/bytesToInt(fd[9],fd[8],fd[7])),length=bytesToInt(fd[12],fd[11],fd[10]);let loopStart=bytesToInt(fd[15],fd[14],fd[13]),loopEnd=bytesToInt(fd[18],fd[17],fd[16])+1;const loopType=fd[19];if(127===loopType&&(loopStart=loopEnd=length),sampleRate<4e3||sampleRate>96e3)return!1;if(16!==bitRate)return!1;let idx=fd.findIndex(((x,i)=>240===x&&126===fd[i+1]&&2===fd[i+3]&&247===fd[i+126])),lengthRead=0,data=[];for(;lengthRead<length;){for(let t=idx+5;t<idx+125&&lengthRead<length;t+=3){let val=(fd[t]<<9|fd[t+1]<<2|fd[t+2]>>5)-32768;data[lengthRead++]=val}idx+=127}const resample=new Resampler(sampleRate,masterSR,1,data.filter((x=>void 0!==x)));resample.resampler(resample.inputBuffer.length);const audioArrayBuffer=audioCtx.createBuffer(1,resample.outputBuffer.length-resample.outputBuffer.length/120*5,masterSR);return resample.outputBuffer.filter((x=>void 0!==x)).forEach(((y,i)=>audioArrayBuffer.getChannelData(0)[i]=y/32767)),files.push({file:file,buffer:audioArrayBuffer,meta:{bitRate:bitRate,masterSR:masterSR,length:resample.outputBuffer.length,loopStart:loopStart,loopEnd:loopEnd,loopType:loopType,duration:Number(resample.outputBuffer.length/masterSR).toFixed(4),checked:!0,id:uuid}}),unsorted.push(uuid),uuid},parseWav=(audioArrayBuffer,file)=>{const uuid=crypto.randomUUID();return files.push({file:file,buffer:audioArrayBuffer,meta:{masterSR:masterSR,length:audioArrayBuffer.length,duration:Number(audioArrayBuffer.length/masterSR).toFixed(4),checked:!0,id:uuid,channel:"L"}}),unsorted.push(uuid),uuid},renderListWhenReady=count=>{(count=count.filter((c=>!1!==c))).every((c=>unsorted.includes(c)))?renderList():setTimeout((()=>renderListWhenReady(count)),1e3)};function audioBufferToWav(buffer,meta){const sampleRate=masterSR,format=meta.float32?3:1,bitDepth=3===(meta.format||meta.bitRate)?32:16;let result,numChannels=buffer.numberOfChannels;if(meta.channel){if(numChannels=1,"L"===meta.channel&&(result=buffer.getChannelData(0)),"R"===meta.channel&&(result=buffer.getChannelData(1)),"S"===meta.channel){result=new Float32Array(buffer.length);for(let i=0;i<buffer.length;i++)result[i]=(buffer.getChannelData(0)[i]+buffer.getChannelData(1)[i])/2}}else result=2===numChannels?interleave(buffer.getChannelData(0),buffer.getChannelData(1)):buffer.getChannelData(0);return encodeWAV(result,format,sampleRate,numChannels,bitDepth)}function encodeWAV(samples,format,sampleRate,numChannels,bitDepth){var bytesPerSample=bitDepth/8,blockAlign=numChannels*bytesPerSample,buffer=new ArrayBuffer(44+samples.length*bytesPerSample),view=new DataView(buffer);return writeString(view,0,"RIFF"),view.setUint32(4,36+samples.length*bytesPerSample,!0),writeString(view,8,"WAVE"),writeString(view,12,"fmt "),view.setUint32(16,16,!0),view.setUint16(20,format,!0),view.setUint16(22,numChannels,!0),view.setUint32(24,sampleRate,!0),view.setUint32(28,sampleRate*blockAlign,!0),view.setUint16(32,blockAlign,!0),view.setUint16(34,bitDepth,!0),writeString(view,36,"data"),view.setUint32(40,samples.length*bytesPerSample,!0),1===format?floatTo16BitPCM(view,44,samples):writeFloat32(view,44,samples),buffer}function interleave(inputL,inputR){for(var length=inputL.length+inputR.length,result=new Float32Array(length),index=0,inputIndex=0;index<length;)result[index++]=inputL[inputIndex],result[index++]=inputR[inputIndex],inputIndex++;return result}function writeFloat32(output,offset,input){for(var i=0;i<input.length;i++,offset+=4)output.setFloat32(offset,input[i],!0)}function floatTo16BitPCM(output,offset,input){for(var i=0;i<input.length;i++,offset+=2){var s=Math.max(-1,Math.min(1,input[i]));output.setInt16(offset,s<0?32768*s:32767*s,!0)}}function writeString(view,offset,string){for(var i=0;i<string.length;i++)view.setUint8(offset+i,string.charCodeAt(i))}uploadInput.addEventListener("change",(()=>{let numberOfBytes=0,count=[];[...uploadInput.files].forEach(((file,idx)=>{numberOfBytes+=file.size;var reader=new FileReader;reader.onload=async function(e){if(file.name.toLowerCase().endsWith(".syx")){const buffer=e.target.result,bufferByteLength=buffer.byteLength,bufferUint8Array=new Uint8Array(buffer,0,bufferByteLength);count.push(parseSds(bufferUint8Array,file))}file.name.toLowerCase().endsWith(".wav")&&await audioCtx.decodeAudioData(e.target.result,(data=>count.push(parseWav(data,file)))),document.getElementById("fileNum").textContent=`${files.length}/${files.length}`},reader.readAsArrayBuffer(file)})),setTimeout((()=>renderListWhenReady(count)),500)}),!1),addEventListener("click",(event=>{shiftKeyDown=event.shiftKey}));