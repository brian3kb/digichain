import{Resampler,audioBufferToWav,encodeOt,getAifSampleRate}from"./resources.js";import{editor,showEditor,drawWaveform,getNiceFileName,setEditorConf,getUniqueName}from"./editor.js";const uploadInput=document.getElementById("uploadInput"),listEl=document.getElementById("fileList"),infoEl=document.getElementById("infoIndicator"),DefaultSliceOptions=[0,4,8,16,32,64,120],opSliceOptions=[4,8,12,16,20,24],otSliceOptions=[4,8,16,32,48,64],audioConfigOptions={m4410016:{sr:44100,bd:16,c:1},s4410016:{sr:44100,bd:16,c:2},m4410024:{sr:44100,bd:24,c:1},s4410024:{sr:44100,bd:24,c:2},m4410032:{sr:44100,bd:32,c:1},s4410032:{sr:44100,bd:32,c:2},m4800016:{sr:48e3,bd:16,c:1},s4800016:{sr:48e3,bd:16,c:2},m4800024:{sr:48e3,bd:24,c:1},s4800024:{sr:48e3,bd:24,c:2},m4800032:{sr:48e3,bd:32,c:1},s4800032:{sr:48e3,bd:32,c:2},m4410016a:{sr:44100,bd:16,c:1,f:"a"},s4410016a:{sr:44100,bd:16,c:2,f:"a"}};let lastSelectedRow,lastLastSelectedRow,workBuffer,masterSR=48e3,masterBitDepth=16,masterChannels=1,lastUsedAudioConfig=localStorage.getItem("lastUsedAudioConfig")??"m4800016",restoreLastUsedAudioConfig=JSON.parse(localStorage.getItem("restoreLastUsedAudioConfig"))??!0,pitchModifier=JSON.parse(localStorage.getItem("pitchModifier"))??1,playWithPopMarker=JSON.parse(localStorage.getItem("playWithPopMarker"))??0,zipDownloads=JSON.parse(localStorage.getItem("zipDownloads"))??!0,embedSliceData=JSON.parse(localStorage.getItem("embedSliceData"))??!0,showTouchModifierKeys=JSON.parse(localStorage.getItem("showTouchModifierKeys"))??!0,exportWithOtFile=JSON.parse(localStorage.getItem("exportWithOtFile"))??!1,darkModeTheme=JSON.parse(localStorage.getItem("darkModeTheme"))??!0,normalizeContrast=JSON.parse(localStorage.getItem("normalizeContrast"))??!1,importFileLimit=JSON.parse(localStorage.getItem("importFileLimit"))??!0,secondsPerFile=0,audioCtx=new AudioContext({sampleRate:masterSR}),files=[],unsorted=[],metaFiles=[],mergeFiles=[],chainFileNames=[],lastSort="",lastSliceFileImport=[],lastOpKit=[],sliceGrid=0,sliceOptions=Array.from(DefaultSliceOptions),lastSliceOptions=Array.from(sliceOptions),keyboardShortcutsDisabled=!1,modifierKeys={shiftKey:!1,ctrlKey:!1};function changeAudioConfig(event,option){const selection=option||event?.target?.selectedOptions[0]?.value||"m4800016";if(files.length>0&&audioConfigOptions[selection].sr!==masterSR){if(!confirm("Changing audio export sample rate will remove all files from the sample list.\n\n Do you want to continue?"))return event.target.selectedIndex=[...event.target.options].findIndex((s=>s.value===event.target.dataset.selection)),!1}option?document.getElementById("audioConfigOptions").value=option:(lastUsedAudioConfig=selection,localStorage.setItem("lastUsedAudioConfig",selection)),files=audioConfigOptions[selection].sr!==masterSR?[]:files,[masterSR,masterBitDepth,masterChannels]=[audioConfigOptions[selection].sr,audioConfigOptions[selection].bd,audioConfigOptions[selection].c],event.target.dataset.selection=selection,audioCtx=new AudioContext({sampleRate:masterSR}),secondsPerFile=lastUsedAudioConfig.includes("a")?20:secondsPerFile,toggleSecondsPerFile(!1,0===secondsPerFile?0:2===masterChannels?20:12),setEditorConf({audioCtx:audioCtx,masterSR:masterSR,masterChannels:masterChannels,masterBitDepth:masterBitDepth}),renderList()}function checkAudioContextState(){return"closed"===audioCtx.state?(document.body.classList.remove("loading"),alert("ERROR: The Audio Context has been closed, please refresh the browser tab."),!0):(["interrupted","suspended"].includes(audioCtx.state)&&audioCtx.resume(),!1)}metaFiles.getByFileName=function(filename){let found=this.find((m=>m.name.replace(/\.[^.]*$/,"")===filename.replace(/\.[^.]*$/,"")));return"---sliceToTransientCached---"!==filename||found||(found={uuid:crypto.randomUUID(),name:"---sliceToTransientCached---",sliceCount:0,slices:[]},metaFiles.push(found)),found},metaFiles.getByFile=function(file){if(file.meta.slicedFrom)return!1;const found=this.find((m=>m.name.replace(/\.[^.]*$/,"")===file.file.name.replace(/\.[^.]*$/,"")));if(found)return found;if(file.meta.op1Json&&file.meta.op1Json.start){let opSlices=file.meta.op1Json.start.map(((s,i)=>({startPoint:s,endPoint:file.meta.op1Json.end[i]}))).reduce(((acc,curr,idx)=>(acc?.pos&&acc.pos>-1?curr.endPoint>acc.pos&&(acc.result.push(curr),acc.pos=curr.endPoint):(acc.pos=acc.pos??curr.endPoint,acc.result.push(curr)),acc)),{result:[]}).result;return{uuid:file.meta.uuid,name:file.file.name,path:file.file.path,cssClass:"is-op-file",sliceCount:opSlices.length,slices:opSlices}}return file.meta.slices?{uuid:file.meta.uuid,name:file.file.name,path:file.file.path,cssClass:"is-dc-file",sliceCount:file.meta.slices.length,slices:file.meta.slices.map((slice=>({startPoint:slice.s,endPoint:slice.e,name:slice.n})))}:void 0},metaFiles.removeSelected=function(){files.forEach((f=>{const idx=this.findIndex((i=>i===this.getByFileName(f.file.name)));f.meta.checked&&-1!==idx&&this.splice(idx,1)}))},metaFiles.removeByName=function(filename){const idx=this.findIndex((i=>i===this.getByFileName(filename)));-1!==idx&&this.splice(idx,1)};const getFileById=id=>files.find((f=>f.meta.id===id)),getFileIndexById=id=>files.findIndex((f=>f.meta.id===id)),getRowElementById=(id,tableId="#masterList")=>document.querySelector(`${tableId} tr[data-id="${id}"]`),toggleModifier=key=>{"shiftKey"!==key&&"ctrlKey"!==key||(modifierKeys[key]=!modifierKeys[key],document.getElementById("modifierKey"+key).classList[modifierKeys[key]?"add":"remove"]("active"),document.body.classList[modifierKeys[key]?"add":"remove"](key+"-mod-down"))},closePopUps=()=>{lastSelectedRow?.focus(),document.querySelectorAll(".pop-up").forEach((w=>w.classList.remove("show"))),stopPlayFile(!1,editor.getLastItem()),renderList();try{lastSelectedRow=getRowElementById(lastSelectedRow.dataset.id),lastSelectedRow.classList.add("selected"),lastSelectedRow.scrollIntoViewIfNeeded(!0)}catch(e){}},arePopUpsOpen=()=>[...document.querySelectorAll(".pop-up")].some((w=>w.classList.contains("show")))||document.querySelectorAll("dialog[open]").length>0,toggleOptionsPanel=()=>{const buttonsEl=document.getElementById("allOptionsPanel"),toggleButtonEl=document.getElementById("toggleOptionsButton");buttonsEl.classList.contains("hidden")?buttonsEl.classList.remove("hidden"):buttonsEl.classList.add("hidden"),buttonsEl.classList.contains("hidden")?toggleButtonEl.classList.add("collapsed"):toggleButtonEl.classList.remove("collapsed")};function chainFileNamesAvailable(getCount=!1){const count=chainFileNames.filter((f=>!f.used)).length;return getCount?count:count>0}function getNextChainFileName(length){const chainNameBtnEl=document.querySelector(".chain-name-toggle");let item=chainFileNames.filter((f=>!f.used))[0];return item.used=!0,chainNameBtnEl.dataset.count=`${chainFileNamesAvailable()?chainFileNamesAvailable(!0):""}`,chainNameBtnEl.classList[chainNameBtnEl.dataset.count?"remove":"add"]("fade"),`${item.name}--[${length}].wav`}function generateChainNames(){chainFileNames=[...new Set(files.filter((f=>f.file.path)).map((f=>f.file.path)))].map((p=>({name:p.replace(/\W+/gi,""),used:!1}))),renderChainNamePanelContent()}function changeChainName(event,index,action){let item;if("remove-all"===action){return event.preventDefault(),confirm("Are you sure you want to remove all the chain names below?")&&(chainFileNames=[]),renderChainNamePanelContent()}if(item=void 0===index?{name:"",used:!1}:chainFileNames[index],index>-1&&"remove"===action){return event.preventDefault(),confirm(`Are you sure you want to remove the chain name '${item.name}'?`)&&chainFileNames.splice(index,1),renderChainNamePanelContent()}if(index>-1&&"reuse"===action)return event.preventDefault(),item.used=!1,renderChainNamePanelContent();let newName=prompt("Please enter a name for the chain, names must be unique",item.name);newName&&(item.name=newName,void 0===index&&-1===chainFileNames.findIndex((n=>n.name.toLowerCase()===newName.toLowerCase()))&&chainFileNames.push(item),renderChainNamePanelContent())}function renderChainNamePanelContent(){const chainNameBtnEl=document.querySelector(".chain-name-toggle"),contentEl=document.getElementById("chainFileNameListPanel").querySelector(".content"),namesHtml=chainFileNames.sort(((a,b)=>a.used-b.used)).reduce(((a,v,i)=>a+`\n        <tr>\n        <td\n            class="chain-file-name-option ${v.used?"used":""}"\n            onclick="digichain.changeChainName(event, ${i})"\n        >${v.name} </td>\n        <td>\n        <button title="Remove this name from the list." class="remove-chain float-right button-clear" onclick="digichain.changeChainName(event, ${i}, 'remove')"><i class="gg-remove"></i></button>\n        <button title="Reset this name so it can be reused for a sample chain name." class="reuse-chain p-0 float-right button-clear ${v.used?"":"hidden"}" onclick="digichain.changeChainName(event, ${i}, 'reuse')"><i class="gg-undo"></i></button>\n        </td>\n        </tr>\n`),"");chainNameBtnEl.dataset.count=`${chainFileNamesAvailable()?chainFileNamesAvailable(!0):""}`,chainNameBtnEl.classList[chainNameBtnEl.dataset.count?"remove":"add"]("fade"),contentEl.innerHTML=`\n    <div class="row">\n      <div class="column mh-60vh">\n          <table>\n              <tr>\n                  <th class="p-0"><h5>Sample Chain Names</h5></th>\n                  <th class="p-0"><button title="Remove all names from the list." class="remove-chain float-right button-clear" style="transform: translateX(-0.5rem);" onclick="digichain.changeChainName(event, -1, 'remove-all')"><i class="gg-remove"></i></button></th>\n              </tr>\n              <tbody>\n                  ${namesHtml}\n              </tbody>\n          </table>\n      </div>\n    </div>\n    <div style="padding-top:1rem;">\n        <button title="Generates a list of filenames based on the folder path of the files in the list. This will replace all other names in the sample names list." class="button-outline float-left" onclick="digichain.generateChainNames()">Generate</button>\n        <button title="Add a name to use for sample chains, if the list is empty, or all the names have already been used, the DigiChain default naming convention will be used. (Names must be unique, caps are ignored.)" class="button float-right" onclick="digichain.changeChainName(event)">Add Name</button>\n    </div>\n    `}function toggleChainNamePanel(){const chainFileNameListPanelEl=document.getElementById("chainFileNameListPanel");chainFileNameListPanelEl.open?chainFileNameListPanelEl.close():chainFileNameListPanelEl.showModal(),chainFileNameListPanelEl.open&&renderChainNamePanelContent()}const showEditPanel=(event,id,view="sample")=>{let data,folderOptions;"opExport"===view?(lastOpKit=files.filter((f=>f.meta.checked)),data=lastOpKit):(id&&"opExport"!==view&&(lastSelectedRow=getRowElementById(id)),folderOptions=[...new Set(files.map((f=>f.file.path)))],data=getFileById(id||lastSelectedRow.dataset.id)),showEditor(data,{audioCtx:audioCtx,masterSR:masterSR,masterChannels:masterChannels,masterBitDepth:masterBitDepth},view,folderOptions)};function checkShouldExportOtFile(){return exportWithOtFile&&2===masterChannels&&44100===masterSR&&!lastUsedAudioConfig.includes("a")}async function setWavLink(file,linkEl,renderAsAif){let wav,blob,fileName=getNiceFileName("",file,!1,!0);if(fileName=lastUsedAudioConfig.includes("a")?fileName.replace(".wav",".aif"):fileName,wav=audioBufferToWav(file.buffer,file.meta,masterSR,masterBitDepth,masterChannels,renderAsAif&&1===pitchModifier,pitchModifier,embedSliceData),blob=new window.Blob([new DataView(wav)],{type:renderAsAif&&1===pitchModifier?"audio/aiff":"audio/wav"}),1!==pitchModifier){let linkedFile=await fetch(URL.createObjectURL(blob)),arrBuffer=await linkedFile.arrayBuffer(),pitchedBuffer=await audioCtx.decodeAudioData(arrBuffer),meta={...file.meta};meta.slices=meta.slices.map((slice=>({...slice,n:slice.n,s:Math.round(slice.s/pitchModifier),e:Math.round(slice.e/pitchModifier)}))),wav=audioBufferToWav(pitchedBuffer,meta,masterSR,masterBitDepth,masterChannels,renderAsAif,1,embedSliceData),blob=new window.Blob([new DataView(wav)],{type:renderAsAif?"audio/aiff":"audio/wav"})}return linkEl.href=URL.createObjectURL(blob),linkEl.setAttribute("download",fileName),blob}async function downloadAll(event){const _files=files.filter((f=>f.meta.checked)),flattenFolderStructure=event.shiftKey||modifierKeys.shiftKey,links=[],el=document.getElementById("getJoined"),renderAsAif=lastUsedAudioConfig.includes("a");if(0===_files.length)return;if(_files.length>5&&!zipDownloads){if(!confirm(`You are about to download ${_files.length} files, that will show ${_files.length} pop-ups one after each other..\n\nAre you ready for that??`))return}if(document.getElementById("loadingText").textContent="Processing",document.body.classList.add("loading"),zipDownloads&&_files.length>1){const zip=new JSZip;for(const file of _files){const blob=await setWavLink(file,el,renderAsAif);let fileName="";if(fileName=lastUsedAudioConfig.includes("a")?fileName.replace(".wav",".aif"):fileName,flattenFolderStructure){fileName=getNiceFileName("",file,!1,!0),fileName=lastUsedAudioConfig.includes("a")?fileName.replace(".wav",".aif"):fileName,zip.file(fileName,blob,{binary:!0});let otFile=createAndSetOtFileLink(file.meta.slices??[],file.buffer.length,fileName);otFile&&zip.file(otFile.name,otFile.blob,{binary:!0})}else{let fileName=getNiceFileName("",file,!1);fileName=lastUsedAudioConfig.includes("a")?fileName.replace(".wav",".aif"):fileName,zip.file(file.file.path+fileName,blob,{binary:!0});let otFile=createAndSetOtFileLink(file.meta.slices??[],file.buffer.length,fileName);otFile&&zip.file(file.file.path+otFile.name,otFile.blob,{binary:!0})}}return void zip.generateAsync({type:"blob"}).then((blob=>{const el=document.getElementById("getJoined");el.href=URL.createObjectURL(blob),el.setAttribute("download","digichain_files.zip"),el.click(),document.body.classList.remove("loading")}))}for(const file of _files){const link=await downloadFile(file.meta.id);links.push(link)}const intervalId=setInterval((()=>{const lnk=links.shift();lnk?.click(),0===links.length&&lnk&&(clearInterval(intervalId),document.body.classList.remove("loading"))}),500)}async function downloadFile(id,fireLink=!1){const el=getRowElementById(id).querySelector(".wav-link-hidden"),metaEl=getRowElementById(id).querySelector(".meta-link-hidden"),file=getFileById(id),renderAsAif=lastUsedAudioConfig.includes("a");return await setWavLink(file,el,renderAsAif),fireLink&&el.click(),createAndSetOtFileLink(file.meta.slices??[],file.buffer.length,file.file.name,metaEl)&&metaEl.click(),el}function toggleSelectedActionsList(){const actionListEl=document.querySelector(".selected-actions-button-list");actionListEl.style.display="none"===actionListEl.style.display?"block":"none"}function removeSelected(){metaFiles.removeSelected(),files.filter((f=>f.meta.checked)).forEach((f=>remove(f.meta.id))),files=files.filter((f=>!f.meta.checked)),unsorted=unsorted.filter((id=>files.find((f=>f.meta.id===id)))),setCountValues(),0!==files.length&&0!==unsorted.length||(files.forEach((f=>!!f.buffer&&delete f.buffer)),files=[],unsorted=[])}function normalizeSelected(event){files.forEach((f=>f.meta.checked?f.source?.stop():"")),document.getElementById("loadingText").textContent="Processing",document.body.classList.add("loading"),setTimeout((()=>{const selected=files.filter((f=>f.meta.checked));selected.forEach(((f,idx)=>{editor.normalize(event,f,!1),idx===selected.length-1&&document.body.classList.remove("loading")})),renderList()}),250)}function trimRightSelected(event){files.forEach((f=>f.meta.checked?f.source?.stop():"")),document.getElementById("loadingText").textContent="Processing",document.body.classList.add("loading"),setTimeout((()=>{const selected=files.filter((f=>f.meta.checked));selected.forEach(((f,idx)=>{editor.trimRight(event,f,!1),idx===selected.length-1&&document.body.classList.remove("loading")})),renderList()}),250)}function truncateSelected(event){let truncLength=3;if(event.shiftKey||modifierKeys.shiftKey){const userResponse=prompt("Please enter a custom length in seconds to truncate the selected samples to...");userResponse&&!isNaN(userResponse)&&(truncLength=Math.abs(+userResponse))}files.forEach((f=>f.meta.checked?f.source?.stop():"")),document.getElementById("loadingText").textContent="Processing",document.body.classList.add("loading"),setTimeout((()=>{const selected=files.filter((f=>f.meta.checked));selected.forEach(((f,idx)=>{editor.truncate(event,f,!1,truncLength),idx===selected.length-1&&document.body.classList.remove("loading")})),renderList()}),250)}function reverseSelected(event){files.forEach((f=>f.meta.checked?f.source?.stop():"")),document.getElementById("loadingText").textContent="Processing",document.body.classList.add("loading"),setTimeout((()=>{const selected=files.filter((f=>f.meta.checked));selected.forEach(((f,idx)=>{editor.reverse(event,f,!1),idx===selected.length-1&&document.body.classList.remove("loading")})),renderList()}),250)}function pitchUpSelected(event){files.forEach((f=>f.meta.checked?f.source?.stop():"")),document.getElementById("loadingText").textContent="Processing",document.body.classList.add("loading"),setTimeout((()=>{const selected=files.filter((f=>f.meta.checked));selected.forEach(((f,idx)=>{editor.perSamplePitch(event,2,-12,f,!1),idx===selected.length-1&&document.body.classList.remove("loading")})),renderList()}),250)}function showInfo(){const description=document.querySelector("meta[name=description]").content;document.querySelector("#infoPanelMd .content").innerHTML=`\n  <h3>DigiChain</h3>\n  <p>${description}</p>\n  <p class="float-right"><a href="https://brianbar.net/" target="_blank">Brian Barnett</a>\n  (<a href="https://www.youtube.com/c/sfxBrian" target="_blank">sfxBrian</a> / <a href="https://github.com/brian3kb" target="_blank">brian3kb</a>) </p>\n`,document.querySelector("#infoPanelMd").showModal()}function pitchExports(value,silent){const octaves={2:1,4:2,8:3};if([.25,.5,1,2,4,8].includes(+value)){if(pitchModifier=+value,localStorage.setItem("pitchModifier",pitchModifier),infoEl.textContent=1===pitchModifier?"":`All exported samples will be pitched up ${octaves[pitchModifier]} octave${pitchModifier>2?"s":""}`,silent)return;setCountValues(),showExportSettingsPanel()}return value}function toggleSetting(param,value){"zipDl"===param&&(zipDownloads=!zipDownloads,localStorage.setItem("zipDownloads",zipDownloads),showExportSettingsPanel()),"embedSliceData"===param&&(embedSliceData=!embedSliceData,localStorage.setItem("embedSliceData",embedSliceData),showExportSettingsPanel()),"exportWithOtFile"===param&&(exportWithOtFile=!exportWithOtFile,localStorage.setItem("exportWithOtFile",exportWithOtFile),showExportSettingsPanel()),"importFileLimit"===param&&(importFileLimit=!importFileLimit,localStorage.setItem("importFileLimit",importFileLimit),showExportSettingsPanel()),"darkModeTheme"===param&&(darkModeTheme=!darkModeTheme,localStorage.setItem("darkModeTheme",darkModeTheme),document.body.classList[darkModeTheme?"remove":"add"]("light"),showExportSettingsPanel()),"normalizeContrast"===param&&(normalizeContrast=!normalizeContrast,localStorage.setItem("normalizeContrast",normalizeContrast),document.body.classList[normalizeContrast?"add":"remove"]("normalize-contrast"),showExportSettingsPanel()),"restoreLastUsedAudioConfig"===param&&(restoreLastUsedAudioConfig=!restoreLastUsedAudioConfig,localStorage.setItem("restoreLastUsedAudioConfig",restoreLastUsedAudioConfig),showExportSettingsPanel()),"showTouchModifierKeys"===param&&(showTouchModifierKeys=!showTouchModifierKeys,localStorage.setItem("showTouchModifierKeys",showTouchModifierKeys),document.querySelector(".touch-buttons").classList[showTouchModifierKeys?"remove":"add"]("hidden"),showExportSettingsPanel()),"playWithPopMarker"===param&&(playWithPopMarker=value,files.forEach((f=>f.meta.peak=void 0)),localStorage.setItem("playWithPopMarker",playWithPopMarker),showExportSettingsPanel())}function setCustomSecondsPerFileValue(targetEl,size,silent=!1){let newValue=size;return silent||(newValue=prompt(`Change max seconds per file "${size}" to what new value?`,size)),newValue&&!isNaN(newValue)&&(newValue=Math.abs(Math.ceil(+newValue)),secondsPerFile=+newValue,targetEl.textContent=newValue),+newValue}function toggleSecondsPerFile(event,value){const toggleEl=document.querySelector(".toggle-seconds-per-file"),toggleSpanEl=document.querySelector(".toggle-seconds-per-file span");(event.ctrlKey||modifierKeys.ctrlKey)&&(value=setCustomSecondsPerFileValue(toggleSpanEl,secondsPerFile)||value),secondsPerFile=void 0!==value?value:0===secondsPerFile?2===masterChannels?20:12:0,0===secondsPerFile?(toggleEl.classList.remove("on"),toggleSpanEl.innerText="off"):(toggleEl.classList.add("on"),toggleSpanEl.innerText=`${secondsPerFile}s`,selectSliceAmount({shiftKey:!0,target:document.querySelector(".slice-grid-off")},0)),setCountValues()}function toggleHelp(){const helpToggleEl=document.querySelector(".toggle-help-panel"),helpEnabled=document.body.classList.contains("show-help");if(document.body.classList[helpEnabled?"remove":"add"]("show-help"),document.querySelector(".help-text").classList[helpEnabled?"add":"remove"]("hidden"),helpToggleEl.classList[helpEnabled?"add":"remove"]("fade"),helpToggleEl.dataset.interval&&(clearInterval(+helpToggleEl.dataset.interval),helpToggleEl.dataset.interval=null),!helpEnabled){const intervalId=setInterval((()=>{const helpTextEl=document.querySelector(".help-text"),activeEl=document.activeElement;helpTextEl.textContent=activeEl.title,helpTextEl.classList[activeEl.title?"remove":"add"]("fade")}),500);helpToggleEl.dataset.interval=`${intervalId}`}}function changeOpParam(event,id,param,value){const rowEl=getRowElementById(id),item=getFileById(id);if("bal"===param){event.draggable=!1,event.preventDefault();rowEl.querySelector(".channel-options-stereo-opf .channel-balance");let newValue=+event.target.value??16384;newValue-=newValue%1024,item.meta.opPan=newValue}return"baltoggle"===param&&(item.meta.opPanAb=!item.meta.opPanAb,rowEl.querySelector(".channel-options-stereo-opf").classList[item.meta.opPanAb?"add":"remove"]("op-pan-ab-true")),!1}function showExportSettingsPanel(){const panelEl=document.querySelector("#exportSettingsPanel");document.querySelector("#exportSettingsPanel .content").innerHTML=`\n  <h5>Settings</h5>\n  <table style="padding-top:0;">\n  <thead>\n  <tr>\n  <th width="55%"></th>\n  <th></th>\n</tr>\n</thead>\n  <tbody>\n  <tr>\n  <td><span>Pitch up exported files by octave &nbsp;&nbsp;&nbsp;</span></td>\n  <td>    <button onclick="digichain.pitchExports(1)" class="check ${1===pitchModifier?"button":"button-outline"}">OFF</button>\n  <button onclick="digichain.pitchExports(2)" class="check ${2===pitchModifier?"button":"button-outline"}">1</button>\n  <button onclick="digichain.pitchExports(4)" class="check ${4===pitchModifier?"button":"button-outline"}">2</button>\n  <button onclick="digichain.pitchExports(8)" class="check ${8===pitchModifier?"button":"button-outline"}">3</button><br></td>\n</tr>\n<tr>\n<td><span>Restore the last used Sample Rate/Bit Depth/Channel? &nbsp;&nbsp;&nbsp;</span></td>\n<td><button onclick="digichain.toggleSetting('restoreLastUsedAudioConfig')" class="check ${restoreLastUsedAudioConfig?"button":"button-outline"}">${restoreLastUsedAudioConfig?"YES":"NO"}</button></td>\n</tr>\n  <tr>\n  <td><span>Play pop markers when playing back samples?<br>0db prevents DT normalization.<br>Peak sets pop to loudest sample peak. &nbsp;&nbsp;&nbsp;</span></td>\n  <td>\n  <button onclick="digichain.toggleSetting('playWithPopMarker', 0)" class="check ${0===playWithPopMarker?"button":"button-outline"}">OFF</button>\n  <button onclick="digichain.toggleSetting('playWithPopMarker', 1)" class="check ${1===playWithPopMarker?"button":"button-outline"}">0db</button>\n  <button onclick="digichain.toggleSetting('playWithPopMarker', 2)" class="check ${2===playWithPopMarker?"button":"button-outline"}">Peak</button>\n  </td>\n  </tr>\n<tr>\n<td><span>Download multi-file/joined downloads as one zip file? &nbsp;&nbsp;&nbsp;</span></td>\n<td><button onclick="digichain.toggleSetting('zipDl')" class="check ${zipDownloads?"button":"button-outline"}">${zipDownloads?"YES":"NO"}</button></td>\n</tr>\n<tr>\n<td><span>Embed slice information in exported wav files?<br>(Disable this if files cause an error loading for you.) &nbsp;&nbsp;&nbsp;</span></td>\n<td><button onclick="digichain.toggleSetting('embedSliceData')" class="check ${embedSliceData?"button":"button-outline"}">${embedSliceData?"YES":"NO"}</button></td>\n</tr>\n<tr>\n<tr>\n<td><span>Create accompanying .ot metadata file?<br>(Applied only to 44.1 16/24 stereo [non-aif] audio contexts) &nbsp;&nbsp;&nbsp;</span></td>\n<td><button onclick="digichain.toggleSetting('exportWithOtFile')" class="check ${exportWithOtFile?"button":"button-outline"}">${exportWithOtFile?"YES":"NO"}</button></td>\n</tr>\n<tr>\n<td><span>Limit imports to maximum of 750 files?<br>(Enforces a limit of 750 files per import, to help prevent crashes on nested folders of many files - disabling may result in slow-downs or timeouts) &nbsp;&nbsp;&nbsp;</span></td>\n<td><button onclick="digichain.toggleSetting('importFileLimit')" class="check ${importFileLimit?"button":"button-outline"}">${importFileLimit?"YES":"NO"}</button></td>\n</tr>\n<tr>\n<td><span>Show Shift/Ctrl modifier touch buttons?&nbsp;&nbsp;&nbsp;</span></td>\n<td><button onclick="digichain.toggleSetting('showTouchModifierKeys')" class="check ${showTouchModifierKeys?"button":"button-outline"}">${showTouchModifierKeys?"YES":"NO"}</button></td>\n</tr>\n<tr>\n<td><span>Use Dark theme as the default? (No = Light theme)&nbsp;&nbsp;&nbsp;</span></td>\n<td><button onclick="digichain.toggleSetting('darkModeTheme')" class="check ${darkModeTheme?"button":"button-outline"}">${darkModeTheme?"YES":"NO"}</button></td>\n</tr>\n<tr>\n<td><span>Normalize text/waveform color contrast? &nbsp;&nbsp;&nbsp;</span></td>\n<td><button onclick="digichain.toggleSetting('normalizeContrast')" class="check ${normalizeContrast?"button":"button-outline"}">${normalizeContrast?"YES":"NO"}</button></td>\n</tr>\n</tbody>\n</table>\n<span class="settings-info">All settings here will persist when the app re-opens.</span>\n`,panelEl.open||panelEl.showModal()}function getMonoFloat32ArrayFromBuffer(buffer,channel,getAudioBuffer=!1){let result=getAudioBuffer?audioCtx.createBuffer(masterChannels,buffer.length,masterSR):new Float32Array(buffer.length);if("S"===channel)for(let i=0;i<buffer.length;i++)(getAudioBuffer?result.getChannelData(0):result)[i]=(buffer.getChannelData(0)[i]+buffer.getChannelData(1)[i])/2;else if("D"===channel)for(let i=0;i<buffer.length;i++)(getAudioBuffer?result.getChannelData(0):result)[i]=(buffer.getChannelData(0)[i]-buffer.getChannelData(1)[i])/2;else{const _channel="R"===channel?1:0;for(let i=0;i<buffer.length;i++)(getAudioBuffer?result.getChannelData(0):result)[i]=buffer.getChannelData(_channel)[i]}return result}function joinToMono(audioArrayBuffer,_files,largest,pad){let totalWrite=0;_files.forEach(((file,idx)=>{const bufferLength=pad?largest:file.buffer.length;let result=getMonoFloat32ArrayFromBuffer(file.buffer,file?.meta?.channel);for(let i=0;i<bufferLength;i++)audioArrayBuffer.getChannelData(0)[totalWrite]=result[i],totalWrite++}))}function joinToStereo(audioArrayBuffer,_files,largest,pad){let totalWrite=0;_files.forEach(((file,idx)=>{const bufferLength=pad?largest:file.buffer.length;let result=[new Float32Array(file.buffer.length),new Float32Array(file.buffer.length)];for(let i=0;i<file.buffer.length;i++)result[0][i]=file.buffer.getChannelData(0)[i],result[1][i]=file.buffer.getChannelData(2===file.buffer.numberOfChannels?1:0)[i];for(let i=0;i<bufferLength;i++)audioArrayBuffer.getChannelData(0)[totalWrite]=result[0][i],audioArrayBuffer.getChannelData(1)[totalWrite]=result[1][i],totalWrite++}))}function showMergePanel(){const mergePanelEl=document.getElementById("mergePanel"),mergePanelContentEl=document.getElementById("mergePanelContent");if(mergeFiles=files.filter((f=>f.meta.checked)).map((f=>(f.meta.pan=f.meta.pan||"C",f))),mergeFiles.length<2)return alert("Merge requires more than one file to be selected.");mergePanelContentEl.innerHTML='\n   <div class="row">\n   <div class="column mh-60vh">\n     <table id="mergeList">\n      <thead>\n        <tr>\n        <th>Filename</th>\n        <th>Duration</th>\n        <th>Mono Channel Choice</th>\n        <th>Panning</th>\n        </tr>\n      </thead>\n    <tbody>\n'+mergeFiles.map((mf=>buildRowMarkupFromFile(mf,"merge"))).join("")+'</tbody>\n   </table>\n </div>\n</div>\n<span class="merge-info">Merging flattens each source sample to mono based on the mixdown choice and pans that mono file hard left/right or centers. If you want to retain a stereo files stereo field in the merge, duplicate it first and choose its L/R mix.</span>\n<button class="float-right" onclick="digichain.performMergeUiCall()">Merge Files</button>\n',mergePanelEl.showModal()}function performMergeUiCall(){const mergePanelEl=document.getElementById("mergePanel");document.getElementById("loadingText").textContent="Processing",document.body.classList.add("loading"),0!==files.filter((f=>f.meta.checked)).length&&(mergePanelEl.close(),setTimeout((()=>performMerge(mergeFiles)),100))}function performMerge(mFiles){let longest=mFiles[0];mFiles.forEach((mf=>longest=longest.buffer.length>mf.buffer.length?longest:mf));let newItem={file:{...longest.file},buffer:audioCtx.createBuffer(2,longest.buffer.length,masterSR),meta:{...longest.meta,channel:"L",isMerge:!0,editOf:"",id:crypto.randomUUID(),checked:!1},waveform:!1};for(let i=0;i<newItem.buffer.length;i++)newItem.buffer.getChannelData(0)[i]=0,newItem.buffer.getChannelData(1)[i]=0;mFiles.forEach(((mf,idx)=>{const panChannel="L"===mf.meta.pan?0:1;let data=mf.buffer.getChannelData(0);if(2===mf.buffer.numberOfChannels&&(data=getMonoFloat32ArrayFromBuffer(mf.buffer,mf.meta?.channel)),"C"===mf.meta.pan)for(let i=0;i<mf.buffer.length;i++)newItem.buffer.getChannelData(0)[i]=(newItem.buffer.getChannelData(0)[i]+data[i])/2,newItem.buffer.getChannelData(1)[i]=(newItem.buffer.getChannelData(1)[i]+data[i])/2;else{const buffer=newItem.buffer.getChannelData(panChannel);for(let i=0;i<mf.buffer.length;i++)newItem.buffer.getChannelData(panChannel)[i]=0===buffer[i]?data[i]:(buffer[i]+data[i])/2}idx===mFiles.length-1&&(files.unshift(newItem),unsorted.push(newItem.meta.id),document.body.classList.remove("loading"),renderList())}))}function joinAllUICall(event,pad){if(0!==files.length){if(0!==secondsPerFile){if(0===files.filter((f=>f.meta.duration<secondsPerFile)).length)return}document.getElementById("loadingText").textContent="Processing",document.body.classList.add("loading"),setTimeout((()=>joinAll(event,pad)),500)}}async function joinAll(event,pad=!1,filesRemaining=[],fileCount=0,toInternal=!1,zip=!1){if(0===files.length)return;(toInternal||event.shiftKey||modifierKeys.shiftKey)&&(toInternal=!0),zipDownloads&&!toInternal&&(zip=zip||new JSZip);let tempFiles,slices,largest,_files=filesRemaining.length>0?filesRemaining:files.filter((f=>f.meta.checked)),totalLength=0;if(0===secondsPerFile){if(tempFiles=_files.splice(0,sliceGrid>0?sliceGrid:_files.length),filesRemaining=Array.from(_files),_files=tempFiles,pad&&0!==sliceGrid&&0!==_files.length)for(;_files.length!==sliceGrid;)_files.push(_files[_files.length-1]);largest=_files.reduce(((big,cur)=>big>cur.buffer.length?big:cur.buffer.length),0),totalLength=_files.reduce(((total,file)=>total+=pad?largest:file.buffer.length),0)}else{_files=_files.filter((f=>f.meta.duration<secondsPerFile));let maxChainLength=lastUsedAudioConfig.includes("a")?24:0===sliceGrid?64:sliceGrid;const processing=_files.reduce(((a,f)=>(a.duration+ +f.meta.duration<=secondsPerFile*pitchModifier&&a.processed.length<maxChainLength?(a.duration=a.duration+ +f.meta.duration,a.totalLength=a.totalLength+ +f.meta.length,a.processed.push(f)):a.skipped.push(f),a)),{duration:0,totalLength:0,processed:[],skipped:[]});totalLength=processing.totalLength,filesRemaining=processing.skipped,_files=processing.processed}slices=[];let offset=0;for(let x=0;x<_files.length;x++){if(_files[x].meta.slices)if(slices.length>0){const _slices=JSON.parse(JSON.stringify(_files[x].meta.slices));_slices.forEach((slice=>{slice.s=slice.s+offset,slice.e=slice.e+offset})),slices=[...slices,..._slices]}else slices=[...slices,..._files[x].meta.slices];else slices.push({s:offset,e:offset+(pad?largest:+_files[x].buffer.length),n:_files[x].file.name,p:_files[x].meta.opPan??16384,pab:_files[x].meta.opPanAb??!1,st:_files[x].meta.opPitch??0});offset+=pad?largest:+_files[x].buffer.length}const audioArrayBuffer=audioCtx.createBuffer(masterChannels,totalLength,masterSR);1===masterChannels&&joinToMono(audioArrayBuffer,_files,largest,pad),2===masterChannels&&joinToStereo(audioArrayBuffer,_files,largest,pad);const joinedEl=document.getElementById("getJoined"),path=_files[0].file.path?`${(_files[0].file.path||"").replace(/\//gi,"-")}`:"",fileData={file:{name:chainFileNamesAvailable()?getNextChainFileName(_files.length):1===_files.length?`${path}chain_${pad?"spaced_":""}${getNiceFileName("",_files[0],!0)}_${fileCount+1}--[${_files.length}].wav`:`${path}chain_${pad?"spaced_":""}${fileCount+1}--[${_files.length}].wav`},buffer:audioArrayBuffer,meta:{slices:slices}};if(toInternal){const blob=await setWavLink(fileData,joinedEl),fileReader=new FileReader;fileReader.readAsArrayBuffer(blob),fileReader.fileCount=fileCount,fileReader.onload=e=>{const fb=e.target.result.slice(0);audioCtx.decodeAudioData(e.target.result,(function(buffer){parseWav(buffer,fb,{lastModified:(new Date).getTime(),name:fileData.file.name,embedSliceData:embedSliceData,size:masterBitDepth*masterSR*(buffer.length/masterSR)/8*buffer.numberOfChannels/1024,type:"audio/wav"},"",!0,!1),renderList()}))}}else{const renderAsAif=lastUsedAudioConfig.includes("a");if(zip){const blob=setWavLink(fileData,joinedEl,renderAsAif);fileData.file.name=lastUsedAudioConfig.includes("a")?fileData.file.name.replace(".wav",".aif"):fileData.file.name,zip.file(fileData.file.name,blob,{binary:!0});let otFile=createAndSetOtFileLink(fileData.meta.slices??[],fileData.buffer.length,fileData.file.name);otFile&&zip.file(otFile.name,otFile.blob,{binary:!0})}else{await setWavLink(fileData,joinedEl,renderAsAif),joinedEl.click(),createAndSetOtFileLink(fileData.meta.slices??[],fileData.buffer.length,fileData.file.name,joinedEl)&&joinedEl.click()}}filesRemaining.length>0?(fileCount++,joinAll(event,pad,filesRemaining,fileCount,toInternal,zip)):(zip&&zip.generateAsync({type:"blob"}).then((blob=>{joinedEl.href=URL.createObjectURL(blob),joinedEl.setAttribute("download","digichain_files.zip"),joinedEl.click()})),renderList())}function joinAllByPath(event,pad=!1){const filesByPath={};files.filter((f=>f.meta.checked)).forEach((file=>{const path=file.file.path.replace(/\//gi,"-");filesByPath[path]=filesByPath[path]||[],filesByPath[path].push(file)}));for(const fBP of filesByPath)joinAll(event,pad,fBP,fBP.length)}const stopPlayFile=(event,id)=>{const file=getFileById(id||lastSelectedRow?.dataset?.id);if(!file)return;try{file?.source?.stop()}catch(e){}if(file.meta.playing&&!0!==file.meta.playing){const[fnType,fnId]=file.meta.playing.split("_");window["clear"+fnType](+fnId),file.meta.playing=!1,file.playHead?.remove(),file.playHead=!1}file.waveform?.classList?.remove("playing");let playHead=file.playHead||file.waveform?.parentElement?.querySelector(".play-head");playHead&&playHead.remove()},playFile=(event,id,loop)=>{const file=getFileById(id||lastSelectedRow.dataset.id);let playHead;loop=loop||event.shiftKey||modifierKeys.shiftKey||!1,stopPlayFile(!1,id||file.meta.id);if(checkAudioContextState())return;file.source=audioCtx.createBufferSource();let buffer=file.meta.channel&&1===masterChannels?getMonoFloat32ArrayFromBuffer(file.buffer,file.meta.channel,!0):file.buffer;if(playWithPopMarker&&!event?.editor){const popAudio=audioCtx.createBuffer(1,8,masterSR),popBuffer=audioCtx.createBuffer(buffer.numberOfChannels,buffer.length+2*popAudio.length,masterSR),popData=popAudio.getChannelData(0);let peak;peak=2===playWithPopMarker?file.meta.peak??editor.normalize(event,file,!1,!0):1,new Array(popAudio.length).fill(0).forEach(((x,i)=>popAudio.getChannelData(0)[i]=peak));for(let channel=0;channel<buffer.numberOfChannels;channel++){const channelData=buffer.getChannelData(channel);popBuffer.copyToChannel(popData,channel),popBuffer.copyToChannel(channelData,channel,popAudio.length),popBuffer.copyToChannel(popData,channel,popAudio.length+channelData.length)}buffer=popBuffer}file.source.buffer=buffer,file.source.connect(audioCtx.destination),file.source.loop=loop,id&&!event?.editor&&(playHead=document.createElement("span"),playHead.classList.add("play-head"),playHead.style.animationDuration=`${file.meta.duration}s`,file.waveform.parentElement.appendChild(playHead),file.playHead=playHead),file.source.start(),id&&!event?.editor&&(playHead.style.animationIterationCount=file.source.loop?"infinite":"unset",file.waveform?.classList?.add("playing"),file.source.loop?file.meta.playing="Interval_"+setInterval((()=>{const ph=file.waveform?.parentElement?.querySelector(".play-head");if(ph){const phClone=ph.cloneNode(!0);ph.remove(),file.waveform.parentElement.appendChild(phClone)}else stopPlayFile(!1,file.meta.id)}),1e3*file.meta.duration):file.meta.playing="Timeout_"+setTimeout((()=>{stopPlayFile(!1,file.meta.id)}),1e3*file.meta.duration))},toggleCheck=(event,id,silent=!1)=>{try{const rowEl=getRowElementById(id),el=getRowElementById(id).querySelector(".toggle-check"),file=getFileById(id);if(event.preventDefault(),event.shiftKey||modifierKeys.shiftKey){const lastRowId=getFileIndexById(lastLastSelectedRow.dataset.id),thisRowId=getFileIndexById(id),from=Math.min(lastRowId,thisRowId),to=Math.max(lastRowId,thisRowId);for(let i=from;i<=to;i++){const loopRow=getRowElementById(files[i].meta.id),check=!(event.ctrlKey||modifierKeys.ctrlKey);files[i].meta.checked=check,loopRow.querySelector(".toggle-check").classList[check?"remove":"add"]("button-outline"),loopRow.classList[check?"add":"remove"]("checked")}}else file.meta.checked=!file.meta.checked,el.classList[file.meta.checked?"remove":"add"]("button-outline"),rowEl.classList[file.meta.checked?"add":"remove"]("checked"),!file.meta.checked&&silent&&file.source?.stop();lastSort="",setCountValues()}catch(err){setCountValues()}},changeChannel=(event,id,channel,allowModKey=!0,tableId="#masterList")=>{const el=getRowElementById(id,tableId).querySelector(".channel-option-"+channel),file=getFileById(id);if((event.shiftKey||modifierKeys.shiftKey)&&allowModKey){return confirm(`Confirm setting all selected samples that are stereo to ${{L:"audio from the Left channel",R:"audio from the Right channel",S:"Sum both channels of audio to mono",D:"Difference between Left and Right channels"}[channel]}?`)&&files.filter((f=>f.meta.checked)).forEach((f=>{f.meta.channel=channel})),!modifierKeys.shiftKey&&document.body.classList.contains("shiftKey-down")&&document.body.classList.remove("shiftKey-down"),renderList()}file.meta.channel=channel,getRowElementById(id,tableId).querySelectorAll(".channel-options a").forEach((opt=>opt.classList.remove("selected"))),el.classList.add("selected")},changePan=(event,id,pan)=>{const el=getRowElementById(id,"#mergeList").querySelector(".pan-option-"+pan);getFileById(id).meta.pan=pan,getRowElementById(id,"#mergeList").querySelectorAll(".pan-options a").forEach((opt=>opt.classList.remove("selected"))),el.classList.add("selected")},invertFileSelection=()=>{0!==files.length&&(files.forEach((file=>file.meta.checked=!file.meta.checked)),renderList())},changeSliceOption=(targetEl,size,silent=!1)=>{let newValue=size;return silent||(newValue=prompt(`Change slice value "${size}" to what new value?`,size)),newValue&&!isNaN(newValue)&&(newValue=Math.abs(Math.ceil(+newValue)),sliceOptions[targetEl.dataset.sel]=+newValue,targetEl.textContent=newValue),+newValue},selectSliceAmount=(event,size)=>{if(event.target){if(event.ctrlKey||modifierKeys.ctrlKey)return 0===size?(DefaultSliceOptions.forEach(((option,index)=>changeSliceOption(document.querySelector(`.master-slices .sel-${index}`),option,!0))),sliceOptions=Array.from(DefaultSliceOptions),selectSliceAmount({shiftKey:!0},0)):selectSliceAmount({shiftKey:!0},changeSliceOption(event.target,size));if(sliceGrid=size,sliceOptions.forEach(((option,index)=>{const el=document.querySelector(`.master-slices .sel-${index}`);option===size?el.classList.remove("button-outline"):el.classList.add("button-outline")})),setCountValues(),0===size&&files.forEach((f=>f.source?.stop())),!event.shiftKey&&!modifierKeys.shiftKey){files.forEach((f=>f.meta.checked=!1));for(let i=0;i<(size<files.length?size:files.length);i++)toggleCheck(event,files[i].meta.id);renderList()}}},duplicate=(event,id,prepForEdit=!1)=>{const file=getFileById(id),fileIdx=getFileIndexById(id)+1,item={file:{...file.file}};item.buffer=new AudioBuffer({numberOfChannels:file.buffer.numberOfChannels,length:file.buffer.length,sampleRate:file.buffer.sampleRate});for(let channel=0;channel<file.buffer.numberOfChannels;channel++){const ogChannelData=file.buffer.getChannelData(channel);item.buffer.getChannelData(channel).set(ogChannelData)}if(item.meta=JSON.parse(JSON.stringify(file.meta)),item.waveform=!1,item.meta.playing=!1,item.meta.id=crypto.randomUUID(),prepForEdit)return item.meta.editOf=id,{item:item,fileIdx:fileIdx,callback:(_item,_fileIdx)=>{files.splice(event.shiftKey||modifierKeys.shiftKey?files.length:_fileIdx,0,_item),unsorted.push(_item.meta.id),renderList()}};item.meta.dupeOf=id,item.file.name=getUniqueName(files,item.file.filename),files.splice(event.shiftKey||modifierKeys.shiftKey?files.length:fileIdx,0,item),unsorted.push(item.meta.id),renderList()};function splitFromFile(input){const trackButtonsContainerEl=document.querySelector(".slice-from-file-buttons"),trackButtonsEl=document.querySelectorAll(".slice-from-file-buttons button");if(!input.target?.files?.length)return;const reader=new FileReader;reader.onload=function(e){if(!e.target.result)return;const json=JSON.parse(e.target.result);json.clips&&(lastSliceFileImport=json.clips.map((clip=>({track:clip.ch+1,startPoint:Math.round(clip.start/44100*masterSR),endPoint:Math.round(clip.stop/44100*masterSR)}))),lastSliceFileImport.trackSlices={},lastSliceFileImport.forEach((slice=>lastSliceFileImport.trackSlices[`t${slice.track}`]=(lastSliceFileImport.trackSlices[`t${slice.track}`]??0)+1)),trackButtonsContainerEl.classList.remove("hidden"),trackButtonsEl.forEach(((btn,i)=>btn.textContent=`${lastSliceFileImport.trackSlices[`t${i+1}`]}`)))},reader.readAsText(input.target.files[0])}function splitFromTrack(event,track){const sliceGroupEl=document.querySelector("#splitOptions .slice-group"),file=getFileById(sliceGroupEl.dataset.id);file.meta.customSlices={slices:lastSliceFileImport.filter((slice=>slice.track===track))},file.meta.customSlices.sliceCount=file.meta.customSlices.slices.length,drawSliceLines(file.meta.customSlices.length,file,file.meta.customSlices)}const splitByOtSlices=(event,id,pushInPlace=!1,sliceSource="ot",excludeSlices=[])=>{const file=getFileById(id),pushInPlaceItems=[];let otMeta;if(otMeta="transient"===sliceSource?metaFiles.getByFileName("---sliceToTransientCached---"):"ot"===sliceSource?metaFiles.getByFile(file):!!file.meta.customSlices&&file.meta.customSlices,otMeta){for(let i=0;i<otMeta.sliceCount;i++){if(excludeSlices.includes(i))continue;const newLength=otMeta.slices[i].endPoint-otMeta.slices[i].startPoint;if(newLength<5)continue;const audioArrayBuffer=audioCtx.createBuffer(file.buffer.numberOfChannels,newLength,masterSR),slice={},uuid=crypto.randomUUID();slice.buffer=audioArrayBuffer,slice.file={...file.file},otMeta.slices[i].name&&(slice.file.name=otMeta.slices[i].name),slice.meta={length:audioArrayBuffer.length,duration:Number(audioArrayBuffer.length/masterSR).toFixed(3),startFrame:0,endFrame:audioArrayBuffer.length,checked:!0,id:uuid,sliceNumber:`${file.meta.sliceNumber?file.meta.sliceNumber+"-":""}${i+1}`,slicedFrom:file.meta.id,channel:audioArrayBuffer.numberOfChannels>1?"L":""},slice.meta.customSlices=!1,slice.meta.op1Json=!1,slice.meta.slices=!1,file.buffer.getChannelData(0).slice(otMeta.slices[i].startPoint,otMeta.slices[i].endPoint).forEach(((a,idx)=>slice.buffer.getChannelData(0)[idx]=a)),2===file.buffer.numberOfChannels&&file.buffer.getChannelData(1).slice(otMeta.slices[i].startPoint,otMeta.slices[i].endPoint).forEach(((a,idx)=>slice.buffer.getChannelData(1)[idx]=a)),pushInPlace?pushInPlaceItems.push(slice):files.push(slice),unsorted.push(uuid)}pushInPlaceItems.length&&files.splice(getFileIndexById(id)+1,0,...pushInPlaceItems),renderList()}},splitEvenly=(event,id,slices,pushInPlace=!1,excludeSlices=[])=>{const file=getFileById(id),frameSize=file.buffer.length/slices,pushInPlaceItems=[];for(let i=0;i<slices;i++){if(excludeSlices.includes(i))continue;const audioArrayBuffer=audioCtx.createBuffer(file.buffer.numberOfChannels,frameSize,file.buffer.sampleRate),slice={},uuid=crypto.randomUUID();slice.buffer=audioArrayBuffer,slice.file={...file.file},slice.meta={length:audioArrayBuffer.length,duration:Number(audioArrayBuffer.length/masterSR).toFixed(3),startFrame:0,endFrame:audioArrayBuffer.length,checked:!0,id:uuid,sliceNumber:`${file.meta.sliceNumber?file.meta.sliceNumber+"-":""}${i+1}`,slicedFrom:file.meta.id,channel:audioArrayBuffer.numberOfChannels>1?"L":""},file.buffer.getChannelData(0).slice(i*frameSize,i*frameSize+frameSize).forEach(((a,idx)=>slice.buffer.getChannelData(0)[idx]=a)),2===file.buffer.numberOfChannels&&file.buffer.getChannelData(1).slice(i*frameSize,i*frameSize+frameSize).forEach(((a,idx)=>slice.buffer.getChannelData(1)[idx]=a)),pushInPlace?pushInPlaceItems.push(slice):files.push(slice),unsorted.push(uuid)}pushInPlaceItems.length&&files.splice(getFileIndexById(id)+1,0,...pushInPlaceItems),renderList()},splitByTransient=(file,threshold=.5)=>{const frameSize=Math.floor(file.buffer.length/256);let lastStart,lastEnd,transientPositions=[];for(let i=0;i<file.buffer.length;i++)void 0===lastStart?Math.abs(file.buffer.getChannelData(0)[i])>threshold&&(lastStart=i,i+=frameSize):void 0===lastEnd&&(0==Math.abs(file.buffer.getChannelData(0)[i]).toFixed(3)||i+frameSize>file.buffer.length)&&(lastEnd=i),void 0!==lastStart&&void 0!==lastEnd&&(transientPositions.push({startPoint:lastStart,loopPoint:lastStart,endPoint:lastEnd}),lastStart=void 0,lastEnd=void 0);transientPositions=transientPositions.filter((s=>!(s.startPoint>s.startPoint+512)||new Array(512).fill(0).every(((p,i)=>Math.abs(file.buffer.getChannelData(0)[s.startPoint-i])<.03)))).map(((s,i,a)=>(s.endPoint=a[i+1]?.startPoint??(i===a.length-1?file.buffer.length:s.endPoint),s)));let metaTransient=metaFiles.getByFileName("---sliceToTransientCached---");return metaTransient.slices=transientPositions,metaTransient.sliceCount=metaTransient.slices.length,metaTransient},splitSizeAction=(event,slices,threshold)=>{let file,otMeta;const sliceGroupEl=document.querySelector("#splitOptions .slice-group"),optionsEl=document.querySelectorAll("#splitOptions .slice-group button");"ot"===slices&&sliceGroupEl.dataset.id&&(file=getFileById(sliceGroupEl.dataset.id),otMeta=metaFiles.getByFile(file),slices=otMeta.slices),"transient"===slices&&sliceGroupEl.dataset.id?(file=getFileById(sliceGroupEl.dataset.id),otMeta=splitByTransient(file,+threshold/100),slices=otMeta.slices):metaFiles.removeByName("---sliceToTransientCached---"),optionsEl.forEach((option=>option.classList.add("button-outline"))),sliceGroupEl.dataset.sliceCount="number"==typeof slices?slices:otMeta.sliceCount,optionsEl.forEach(((option,index)=>{+option.dataset.sel==+sliceGroupEl.dataset.sliceCount&&!otMeta||"ot"===option.dataset.sel&&otMeta&&"---sliceToTransientCached---"!==otMeta.name||"transient"===option.dataset.sel&&otMeta&&"---sliceToTransientCached---"===otMeta.name?option.classList.remove("button-outline"):option.classList.add("button-outline")})),drawSliceLines(slices,file,otMeta),file?.meta?.customSlices&&(file.meta.customSlices=!1)},remove=id=>{stopPlayFile(!1,id);const rowEl=getRowElementById(id),fileIdx=getFileIndexById(id),removed=files.splice(fileIdx,1),unsortIdx=unsorted.findIndex((uuid=>uuid===id));unsorted.splice(unsortIdx,1),removed[0]&&(metaFiles.removeByName(removed[0].file.name),removed.buffer&&delete removed.buffer),rowEl.classList.add("hide"),rowEl.remove()},move=(event,id,direction)=>{const from=getFileIndexById(id);let item,to=1===direction?from+1:from-1;-1===to&&(to=files.length-1),to>=files.length&&(to=0),item=files.splice(from,1)[0],event.shiftKey||modifierKeys.shiftKey?from>to?files.splice(0,0,item):files.splice(files.length,0,item):files.splice(to,0,item),renderList()},sort=(event,by,prop="meta")=>{const groupByChecked=event.shiftKey||modifierKeys.shiftKey,forLocaleCompare=["name","note"];"id"===by?!0===groupByChecked?files.sort((()=>crypto.randomUUID().localeCompare(crypto.randomUUID()))):(files=unsorted.map((key=>files.find((f=>f.meta.id===key)))),lastSort=""):lastSort===by?(files=forLocaleCompare.includes(by)?files.sort(((a,b)=>b[prop][by].localeCompare(a[prop][by]))):files.sort(((a,b)=>b[prop][by]-a[prop][by])),lastSort=""):(files=forLocaleCompare.includes(by)?files.sort(((a,b)=>a[prop][by].localeCompare(b[prop][by]))):files.sort(((a,b)=>a[prop][by]-b[prop][by])),lastSort=by),!0===groupByChecked&&"id"!==by&&files.sort(((a,b)=>b.meta.checked-a.meta.checked)),renderList()},selectedHeaderClick=(event,id)=>{if(event.ctrlKey||modifierKeys.ctrlKey){const allChecked=files.every((f=>f.meta.checked));files.forEach((f=>f.meta.checked=!allChecked)),renderList()}else sort(event,"checked")},handleRowClick=(event,id)=>{const row=getRowElementById(id);document.querySelector(".pop-up.show")||(lastSelectedRow&&lastSelectedRow.classList.remove("selected"),row.classList.add("selected"),lastLastSelectedRow=lastSelectedRow,lastSelectedRow=row,lastSelectedRow.scrollIntoViewIfNeeded(!0),setCountValues())},rowDragStart=event=>{event.target?.classList?.contains("file-row")&&(lastSelectedRow=event.target)},drawSliceLines=(slices,file,otMeta)=>{const _slices="number"==typeof slices?Array.from(".".repeat(slices)):slices,sliceLinesEl=document.getElementById("sliceLines"),waveformWidth=document.querySelector("#splitOptions .waveform-container").dataset.waveformWidth;let lines=[];if(file&&otMeta){let scaleSize=file.buffer.length/waveformWidth;lines=otMeta.slices.map(((slice,idx)=>`\n      <div class="line" data-idx="${idx}" ondblclick="this.classList[this.classList.contains('fade') ? 'remove' : 'add']('fade')" \n      title="${slice.name}"\n      style="margin-left:${slice.startPoint/scaleSize}px; width:${slice.endPoint/scaleSize-slice.startPoint/scaleSize}px;"></div>\n  `))}else lines=_slices.map(((slice,idx)=>`\n    <div class="line" data-idx="${idx}" ondblclick="this.classList[this.classList.contains('fade') ? 'remove' : 'add']('fade')"style="margin-left:${waveformWidth/_slices.length*idx}px; width:${waveformWidth/_slices.length}px;"></div>\n`));sliceLinesEl.innerHTML=lines.join("")},splitAction=(event,id,slices)=>{const el=document.getElementById("splitOptions"),fileNameEl=document.getElementById("splitFileName"),sliceGroupEl=document.querySelector("#splitOptions .slice-group"),sliceByOtButtonEl=document.getElementById("sliceByOtButton"),sliceByTransientButtonEl=document.getElementById("sliceByTransientButton"),splitPanelWaveformContainerEl=(document.getElementById("transientThreshold"),document.querySelector("#splitOptions .waveform-container")),splitPanelWaveformEl=document.getElementById("splitPanelWaveform"),excludeSlices=[...el.querySelectorAll("div.line.fade")].map((s=>+s.dataset.idx));let item,otMeta,pushInPlace=event.shiftKey||modifierKeys.shiftKey;if(!event.target.className.includes("is-")&&!event.target.parentElement.className.includes("is-")||!event.ctrlKey&&!modifierKeys.ctrlKey){if(id&&(lastSelectedRow=getRowElementById(id),sliceGroupEl.dataset.id=id),!0===slices&&(slices=sliceGroupEl.dataset.sliceCount),item=getFileById(id||lastSelectedRow.dataset.id),slices){if(id=id||item.meta.id,"ot"!==slices&&sliceByTransientButtonEl.classList.contains("button-outline")&&sliceByOtButtonEl.classList.contains("button-outline"))item.meta.customSlices?splitByOtSlices(0,id,pushInPlace,"custom",excludeSlices):splitEvenly(0,id,slices,pushInPlace,excludeSlices);else{const sliceSource=sliceByTransientButtonEl.classList.contains("button-outline")?"ot":"transient";splitByOtSlices(0,id,pushInPlace,sliceSource,excludeSlices)}return el.close()}otMeta=metaFiles.getByFile(item),fileNameEl.textContent=getNiceFileName("",item,!0),sliceByOtButtonEl.style.display=otMeta?"inline-block":"none",sliceByOtButtonEl.textContent=otMeta?`${otMeta.sliceCount}`:"OT","is-op-file"===otMeta?.cssClass?(sliceByOtButtonEl.classList.remove("is-ot-file"),sliceByOtButtonEl.classList.remove("is-dc-file"),sliceByOtButtonEl.classList.add("is-op-file")):"is-dc-file"===otMeta?.cssClass?(sliceByOtButtonEl.classList.remove("is-ot-file"),sliceByOtButtonEl.classList.remove("is-op-file"),sliceByOtButtonEl.classList.add("is-dc-file")):(sliceByOtButtonEl.classList.add("is-ot-file"),sliceByOtButtonEl.classList.remove("is-op-file"),sliceByOtButtonEl.classList.remove("is-dc-file")),splitSizeAction(0,0),el.showModal(),drawWaveform(item,splitPanelWaveformEl,item.meta.channel,{width:+splitPanelWaveformContainerEl.dataset.waveformWidth,height:128}),item.meta.customSlices=!1}else{item=getFileById(id||lastSelectedRow.dataset.id);confirm(`Clear slice data for ${item.file.name}?`)&&(item.meta.slices=!1,item.meta.op1Json&&(item.meta.op1Json=!1),metaFiles.removeByName(item.file.name),reRenderListRow(item.meta.id))}},secondsToMinutes=time=>{const mins=Math.floor(time/60),seconds=Number(time%60).toFixed(2);return mins>0?`${mins}m ${Math.round(+seconds)}s`:`${seconds}s`},clearModifiers=()=>{modifierKeys.shiftKey=!1,modifierKeys.ctrlKey=!1,document.body.classList.remove("shiftKey-down"),document.body.classList.remove("ctrlKey-down")},setCountValues=()=>{const filesSelected=files.filter((f=>f.meta.checked)),selectionCount=filesSelected.length,filesDuration=files.reduce(((a,f)=>a+ +f.meta.duration),0),filesSelectedDuration=filesSelected.reduce(((a,f)=>a+ +f.meta.duration),0),joinCount=0===selectionCount?0:selectionCount>0&&sliceGrid>0?Math.ceil(selectionCount/sliceGrid):1;if(document.getElementById("fileNum").textContent=`${files.length}/${selectionCount}`,document.querySelector(".selection-count").textContent=` ${selectionCount||"-"} `,document.getElementById("lengthHeaderLink").textContent=`Length (${secondsToMinutes(filesSelectedDuration)}/${secondsToMinutes(filesDuration)})`,0===secondsPerFile){document.querySelectorAll(".join-count").forEach(((el,idx)=>el.textContent=` ${0===joinCount?"-":joinCount}${0===idx?" Spaced":""}${1===joinCount?" Chain":" Chains"}`));try{document.querySelectorAll("tr").forEach((row=>row.classList.remove("end-of-grid"))),document.querySelectorAll("tr.checked").forEach(((row,i)=>(i+1)%sliceGrid==0?row.classList.add("end-of-grid"):row.classList.remove("end-of-grid")))}catch(e){}}else{const calcFiles=(items,count=0)=>{let progress={duration:0,processed:[],skipped:[],count:count},_items=items.filter((f=>+f.meta.duration<secondsPerFile)),maxChainLength=lastUsedAudioConfig.includes("a")?24:0===sliceGrid?64:sliceGrid;for(;_items.length>0;)progress=_items.reduce(((a,f)=>(a.duration+ +f.meta.duration<=secondsPerFile*pitchModifier&&a.processed.length<maxChainLength?(a.duration=a.duration+ +f.meta.duration,a.processed.push(f)):a.skipped.push(f),a)),progress),progress.count++,progress.duration=0,progress.processed=[],_items=Array.from(progress.skipped),progress.skipped=[];return progress.count};let joinCountSec=0===filesSelected.length?0:calcFiles(filesSelected);document.querySelector(".join-count-chain").textContent=` ${0===joinCountSec?"-":joinCountSec}${1===joinCountSec?" Chain":" Chains"}`;try{document.querySelectorAll("tr").forEach((row=>row.classList.remove("end-of-grid")))}catch(e){}}clearModifiers()};function reRenderListRow(id){const item=getFileById(id),rowEl=getRowElementById(id);rowEl.innerHTML=buildRowMarkupFromFile(item),rowEl.querySelector("canvas.waveform").replaceWith(item.waveform)}const buildRowMarkupFromFile=(f,type="main")=>"main"===type?`\n    <tr class="file-row ${f.meta.checked?"checked":""}" data-id="${f.meta.id}"\n          onclick="digichain.handleRowClick(event, '${f.meta.id}')"\n          onmousedown="digichain.handleRowClick(event, '${f.meta.id}')"  \n          ondragstart="digichain.rowDragStart(event)" draggable="true">\n      <td>\n          <i class="gg-more-vertical"></i>\n      </td>\n      <td class="toggle-td">\n          <button onclick="digichain.toggleCheck(event, '${f.meta.id}')" class="${f.meta.checked?"":"button-outline"} check toggle-check">&nbsp;</button>\n      </td>\n      <td class="move-up-td">\n          <button title="Move up in sample list." onclick="digichain.move(event, '${f.meta.id}', -1)" class="button-clear move-up"><i class="gg-chevron-up-r has-shift-mod-i"></i></button>\n      </td>\n      <td class="move-down-td">\n          <button title="Move down in sample list." onclick="digichain.move(event, '${f.meta.id}', 1)" class="button-clear move-down"><i class="gg-chevron-down-r has-shift-mod-i"></i></button>\n      </td>\n      <td class="waveform-td">\n          <canvas onclick="digichain.playFile(event, '${f.meta.id}')" class="waveform waveform-${f.meta.id} ${f.meta.playing?"playing":""}"></canvas>\n      </td>\n      <td class="file-path-td">\n          <span class="file-path">${f.file.path}</span>\n          <a title="Download processed wav file of sample." class="wav-link" onclick="digichain.downloadFile('${f.meta.id}', true)">${getNiceFileName(f.file.name)}</a>\n          ${f.meta.dupeOf?" d":""}\n          ${f.meta.editOf?" e":""}\n          ${f.meta.isMerge?" m":""}\n          ${f.meta.sliceNumber?" s"+f.meta.sliceNumber:""}\n          <a class="wav-link-hidden" target="_blank"></a>\n          <a class="meta-link-hidden" target="_blank"></a>\n      </td>\n      <td class="duration-td">\n          <span>${f.meta.duration} s</span>\n      </td>\n      <td class="channel-options-td">\n          <div class="channel-options has-shift-mod" style="display: ${f.buffer.numberOfChannels>1&&1===masterChannels?"block":"none"}">\n          <a title="Left channel" onclick="digichain.changeChannel(event, '${f.meta.id}', 'L')" class="${"L"===f.meta.channel?"selected":""} channel-option-L">L</a>\n          <a title="Sum to mono" onclick="digichain.changeChannel(event, '${f.meta.id}', 'S')" class="${"S"===f.meta.channel?"selected":""} channel-option-S">S</a>\n          <a title="Right channel" onclick="digichain.changeChannel(event, '${f.meta.id}', 'R')" class="${"R"===f.meta.channel?"selected":""} channel-option-R">R</a>\n          <a title="Difference between Left and Right channels" onclick="digichain.changeChannel(event, '${f.meta.id}', 'D')" class="${"D"===f.meta.channel?"selected":""} channel-option-D">D</a>\n          </div>`+(lastUsedAudioConfig.includes("a")?`<div class="channel-options channel-options-stereo channel-options-stereo-opf ${f.meta.opPanAb?"op-pan-ab-true":""}" title="${1===f.buffer.numberOfChannels?"Mono sample":"Stereo sample"}" style="display: ${2===masterChannels?"block":"none"}"\n           ondblclick="digichain.changeOpParam(event, '${f.meta.id}', 'baltoggle')"\n           >\n              <input class="channel-balance" type="range" style="display: ${2===f.buffer.numberOfChannels?"inline-block":"none"}" min="0" max="32768" onchange="digichain.changeOpParam(event, '${f.meta.id}', 'bal')" value="${f.meta.opPan??16384}" />\n              <i class="gg-shape-circle" style="display: ${1===f.buffer.numberOfChannels?"inline-block":"none"}"></i>\n              <div style="display: ${2===f.buffer.numberOfChannels?"inline-block":"none"}">\n                <span class="op-la"></span>\n                <span class="op-rb"></span>\n              </div>\n          </div>`:`<div class="channel-options channel-options-stereo" title="${1===f.buffer.numberOfChannels?"Mono sample":"Stereo sample"}" style="display: ${2===masterChannels?"block":"none"}">\n              <i class="gg-shape-circle"></i>\n              <i class="gg-shape-circle stereo-circle" style="display: ${2===f.buffer.numberOfChannels?"inline-block":"none"}"></i>\n          </div>`)+`</td>\n      <td class="split-td">\n          <button title="Slice sample." onclick="digichain.splitAction(event, '${f.meta.id}')" class="button-clear split gg-menu-grid-r ${metaFiles.getByFile(f)?.cssClass}"><i class="gg-menu-grid-r has-ctrl-mod-i"></i></button>\n      </td>\n      <td class="duplicate-td">\n          <button title="Duplicate sample." onclick="digichain.duplicate(event, '${f.meta.id}')" class="button-clear duplicate"><i class="gg-duplicate has-shift-mod-i"></i></button> \n      </td>\n      <td class="toggle-edit-td">\n          <button title="Edit" onclick="digichain.showEditPanel(event, '${f.meta.id}')" class="button-clear toggle-edit"><i class="gg-pen"></i></button>\n      </td>\n      <td class="remove-td">\n          <button title="Remove sample (double-click)." ondblclick="digichain.remove('${f.meta.id}')" class="button-clear remove"><i class="gg-trash"></i></button>\n      </td>\n    </tr>`:`\n<tr class="file-row" data-id="${f.meta.id}">\n  <td class="file-path-td">\n    <span class="file-path">${f.file.path}</span>\n    <span>${getNiceFileName(f.file.name)}</span>\n    ${f.meta.dupeOf?" d":""}\n    ${f.meta.editOf?" e":""}\n    ${f.meta.isMerge?" m":""}\n    ${f.meta.sliceNumber?" s"+f.meta.sliceNumber:""}\n    <a class="wav-link-hidden" target="_blank"></a>\n  </td>\n  <td class="duration-td">\n    <span>${f.meta.duration} s</span>\n  </td>\n  <td class="channel-options-td"">\n      <div class="channel-options" style="display: ${f.buffer.numberOfChannels>1?"block":"none"}">\n      <a title="Left channel" onclick="digichain.changeChannel(event, '${f.meta.id}', 'L', false, '#mergeList')" class="${"L"===f.meta.channel?"selected":""} channel-option-L">L</a>\n      <a title="Sum to mono" onclick="digichain.changeChannel(event, '${f.meta.id}', 'S', false, '#mergeList')" class="${"S"===f.meta.channel?"selected":""} channel-option-S">S</a>\n      <a title="Right channel" onclick="digichain.changeChannel(event, '${f.meta.id}', 'R', false, '#mergeList')" class="${"R"===f.meta.channel?"selected":""} channel-option-R">R</a>\n      <a title="Difference between Left and Right channels" onclick="digichain.changeChannel(event, '${f.meta.id}', 'D', false, '#mergeList')" class="${"D"===f.meta.channel?"selected":""} channel-option-D">D</a>\n      </div>\n      <div class="channel-options channel-options-stereo" title="Mono sample" style="display: ${1===f.buffer.numberOfChannels?"block":"none"}">\n          <i class="gg-shape-circle"></i>\n      </div>\n  </td>\n  <td class="pan-options-td">\n      <div class="pan-options" style="display: block;">\n      <a title="Hard Left" onclick="digichain.changePan(event, '${f.meta.id}', 'L')" class="${"L"===f.meta.pan?"selected":""} pan-option-L">L</a>\n      <a title="Centre" onclick="digichain.changePan(event, '${f.meta.id}', 'C')" class="${"C"===f.meta.pan?"selected":""} pan-option-C">C</a>\n      <a title="Hard Right" onclick="digichain.changePan(event, '${f.meta.id}', 'R')" class="${"R"===f.meta.pan?"selected":""} pan-option-R">R</a>\n      </div>\n  </td>\n</tr>`,drawEmptyWaveforms=_files=>{document.querySelectorAll(".waveform").forEach(((el,i)=>{_files[i]&&(_files[i].waveform?(el.replaceWith(_files[i].waveform),_files[i].playHead&&!_files[i].waveform.nextElementSibling&&_files[i].waveform.parentElement.appendChild(_files[i].playHead)):(drawWaveform(_files[i],el,_files[i].meta.channel),_files[i].waveform=el))})),setCountValues()},renderRow=(item,type)=>{const rowData=item||getFileById(lastSelectedRow.dataset.id);(item?getRowElementById(item.meta.id):lastSelectedRow).innerHTML=buildRowMarkupFromFile(rowData,type),drawEmptyWaveforms(files),document.body.classList.remove("loading")},renderList=()=>{listEl.innerHTML=files.map((f=>buildRowMarkupFromFile(f))).join(""),0===files.length&&(listEl.innerHTML=""),document.body.classList.remove("loading"),drawEmptyWaveforms(files)},bytesToInt=(bh,bm,bl)=>((127&bh)<<7<<7)+((127&bm)<<7)+(127&bl);function noteFromFileName(name){const match=name.match(/[-_. ](?![EB]#)([A-G])([#b])?([0-9]|[0-9]{2})?[-_. ]/);return match?match[0].trim():""}function createAndSetOtFileLink(slices,bufferLength,fileName,linkEl){if(checkShouldExportOtFile()&&slices&&slices.length>0){let _slices=slices.length>64?slices.slice(0,64):slices,data=encodeOt(_slices,bufferLength),fName=fileName.replace(".wav",".ot");if(!data)return!1;let blob=new window.Blob([data],{type:"application/octet-stream"});return linkEl&&(linkEl.href=URL.createObjectURL(blob),linkEl.setAttribute("download",fName)),{blob:blob,name:fName}}return!1}const parseOt=(fd,file,fullPath)=>{const uuid=file.uuid||crypto.randomUUID(),getInt32=values=>{const arr=new Uint8Array(values);return new DataView(arr.buffer).getInt32(0)};try{if(![70,79,82,77,0,0,0,0,68,80,83,49,83,77,80,65].every(((b,i)=>b===fd[i])))return{uuid:uuid,failed:!0};let slices=[],sliceCount=getInt32([fd[826],fd[827],fd[828],fd[829]]),t=58;for(let s=0;s<sliceCount;s++)44100===masterSR?slices.push({startPoint:getInt32([fd[t],fd[t+1],fd[t+2],fd[t+3]]),endPoint:getInt32([fd[t+4],fd[t+5],fd[t+6],fd[t+7]]),loopPoint:getInt32([fd[t+8],fd[t+9],fd[t+10],fd[t+11]])}):slices.push({startPoint:Math.round(getInt32([fd[t],fd[t+1],fd[t+2],fd[t+3]])/44100*masterSR),endPoint:Math.round(getInt32([fd[t+4],fd[t+5],fd[t+6],fd[t+7]])/44100*masterSR),loopPoint:Math.round(getInt32([fd[t+8],fd[t+9],fd[t+10],fd[t+11]])/44100*masterSR)}),t+=12;return metaFiles.push({uuid:uuid,name:file.name,path:fullPath,cssClass:"is-ot-file",sliceCount:sliceCount,slices:slices}),unsorted.push(uuid),uuid}catch(err){return{uuid:uuid,failed:!0}}},parseAif=async(arrayBuffer,fd,file,fullPath="",pushToTop=!1)=>{const uuid=file.uuid||crypto.randomUUID();try{let dv=new DataView(arrayBuffer),chunks={},chunkKeys=["FORM","COMM","APPL","SSND"];const getChunkData=(code,offset)=>{switch(code){case"FORM":chunks.form={offset:offset,id:String.fromCharCode(dv.getUint8(offset),dv.getUint8(offset+1),dv.getUint8(offset+2),dv.getUint8(offset+3)),fileSize:dv.getUint32(offset+4),type:String.fromCharCode(dv.getUint8(offset+8),dv.getUint8(offset+9),dv.getUint8(offset+10),dv.getUint8(offset+11))};break;case"COMM":chunks.comm={offset:offset,id:String.fromCharCode(dv.getUint8(offset),dv.getUint8(offset+1),dv.getUint8(offset+2),dv.getUint8(offset+3)),size:dv.getUint32(offset+4),channels:dv.getUint16(offset+8),frames:dv.getUint32(offset+10),bitDepth:dv.getUint16(offset+14),sampleRate:(os=>{const srArr=[];for(let x=os;x<os+10;x++)srArr.push(dv.getUint8(x));return getAifSampleRate(srArr)})(offset+16)};break;case"APPL":const utf8Decoder=new TextDecoder("utf-8");let scale="AIFC"===chunks.form.type&&2===chunks.comm.channels?2434:4058;chunks.json={id:String.fromCharCode(dv.getUint8(offset),dv.getUint8(offset+1),dv.getUint8(offset+2),dv.getUint8(offset+3)),size:dv.getUint32(offset+4),scale:scale};let jsonString=utf8Decoder.decode(arrayBuffer.slice(offset+12,chunks.json.size+offset+8));chunks.json.data=JSON.parse(jsonString.replace(/\]\}(.|\n)+/gi,"]}").trimEnd()),"digichain"===chunks.json.data?.original_folder&&(chunks.json.scale=2434);break;case"SSND":chunks.buffer=arrayBuffer.slice(offset+4),chunks.bufferDv=new DataView(chunks.buffer)}};for(let i=0;i<dv.byteLength-4;i++){const code=String.fromCharCode(dv.getUint8(i),dv.getUint8(i+1),dv.getUint8(i+2),dv.getUint8(i+3));chunkKeys.includes(code)&&(getChunkData(code,i),chunkKeys=chunkKeys.filter((k=>k!==code)))}if(16!=+chunks.comm.bitDepth){return document.getElementById("loadingText").textContent=`Skipping unsupported ${chunks.comm.bitDepth}bit aif file '${file.name}'...`,delete chunks.buffer,delete chunks.bufferDv,dv=!1,arrayBuffer=!1,{uuid:uuid,failed:!0}}const offset=4,bytesPerSample=chunks.comm.bitDepth/8,channels=[];for(let i=0;i<chunks.comm.channels;i++)channels.push(new Float32Array(chunks.comm.frames));for(let i=0;i<chunks.comm.channels;i++){let channel=channels[i];for(let j=0;j<chunks.comm.frames;j++){let index=offset;index+=(j*chunks.comm.channels+i)*bytesPerSample;let value=chunks.bufferDv.getInt16(index,"AIFC"===chunks.form.type),range=1<<chunks.comm.bitDepth-1;value>=range&&(value|=~(range-1)),channel[j]=value/range,0===j&&(channel[j]=0)}}let resample,resampleR;resample=new Resampler(chunks.comm.sampleRate,masterSR,1,channels[0]),resample.resampler(resample.inputBuffer.length),2===chunks.comm.channels&&(resampleR=new Resampler(chunks.comm.sampleRate,masterSR,1,channels[1]),resampleR.resampler(resampleR.inputBuffer.length));const audioArrayBuffer=audioCtx.createBuffer(chunks.comm.channels,resample.outputBuffer.length,masterSR);if(2===chunks.comm.channels)for(let i=0;i<resample.outputBuffer.length;i++)audioArrayBuffer.getChannelData(0)[i]=resample.outputBuffer[i],audioArrayBuffer.getChannelData(1)[i]=resampleR.outputBuffer[i];else for(let i=0;i<resample.outputBuffer.length;i++)audioArrayBuffer.getChannelData(0)[i]=resample.outputBuffer[i];const getRelPosition=(v,i)=>v/chunks.json.scale-13*i;return chunks.json&&chunks.json.data.start&&(chunks.json.data.start=chunks.json.data.start.map(((s,i)=>Math.floor(getRelPosition(s,i)/44100*masterSR)))),chunks.json&&chunks.json.data.end&&(chunks.json.data.end=chunks.json.data.end.map(((s,i)=>Math.floor(getRelPosition(s,i)/44100*masterSR)))),files[pushToTop?"unshift":"push"]({file:{lastModified:file.lastModified,name:getUniqueName(files,file.name),filename:file.name,path:fullPath.replace(file.name,""),size:file.size,type:file.type},buffer:audioArrayBuffer,meta:{length:audioArrayBuffer.length,duration:Number(audioArrayBuffer.length/masterSR).toFixed(3),startFrame:0,endFrame:audioArrayBuffer.length,op1Json:!!chunks.json&&chunks.json.data,channel:audioArrayBuffer.numberOfChannels>1?"L":"",checked:!0,id:uuid,slices:!1,note:noteFromFileName(file.name)}}),unsorted.push(uuid),uuid}catch(err){return{uuid:uuid,failed:!0}}},parseSds=(fd,file,fullPath="",pushToTop=!1)=>{const uuid=file.uuid||crypto.randomUUID();try{if(240!==fd[0]||126!==fd[1]||1!==fd[3]||247!==fd[20])return{uuid:uuid,failed:!0};const bitRate=fd[6],sampleRate=10*Math.ceil(1e8/bytesToInt(fd[9],fd[8],fd[7])),length=bytesToInt(fd[12],fd[11],fd[10]);let loopStart=bytesToInt(fd[15],fd[14],fd[13]),loopEnd=bytesToInt(fd[18],fd[17],fd[16])+1;const loopType=fd[19];if(127===loopType&&(loopStart=loopEnd=length),sampleRate<4e3||sampleRate>96e3)return!1;if(16!==bitRate)return!1;let idx=fd.findIndex(((x,i)=>240===x&&126===fd[i+1]&&2===fd[i+3]&&247===fd[i+126])),lengthRead=0,data=[];for(;lengthRead<length;){for(let t=idx+5;t<idx+125&&lengthRead<length;t+=3)data[lengthRead++]=(fd[t]<<9|fd[t+1]<<2|fd[t+2]>>5)-32768;idx+=127}const resample=new Resampler(sampleRate,masterSR,1,data.filter((x=>void 0!==x)));resample.resampler(resample.inputBuffer.length);const audioArrayBuffer=audioCtx.createBuffer(1,resample.outputBuffer.length-resample.outputBuffer.length/120*5,masterSR);return resample.outputBuffer.filter((x=>void 0!==x)).forEach(((y,i)=>audioArrayBuffer.getChannelData(0)[i]=y/32767)),files[pushToTop?"unshift":"push"]({file:{lastModified:file.lastModified,name:getUniqueName(files,file.name),filename:file.name,path:fullPath.replace(file.name,""),size:file.size,type:file.type},buffer:audioArrayBuffer,meta:{length:resample.outputBuffer.length,loopStart:loopStart,loopEnd:loopEnd,loopType:loopType,duration:Number(resample.outputBuffer.length/masterSR).toFixed(3),startFrame:0,endFrame:resample.outputBuffer.length,checked:!0,id:uuid,slices:!1,note:noteFromFileName(file.name)}}),unsorted.push(uuid),uuid}catch(err){return{uuid:uuid,failed:!0}}},parseWav=(audioArrayBuffer,arrayBuffer,file,fullPath="",pushToTop=!1,checked=!0)=>{const uuid=file.uuid||crypto.randomUUID();let slices=!1;try{let dv=new DataView(arrayBuffer);for(let i=0;i<dv.byteLength-4;i++){const code=String.fromCharCode(dv.getUint8(i),dv.getUint8(i+1),dv.getUint8(i+2),dv.getUint8(i+3));if(i>dv.byteLength||"PAD "===code)break;if("data"===code){const size=dv.getUint32(i+4,!0);if(size&&size<dv.byteLength){i=size-8;continue}}if("DCSD"===code){const size=dv.getUint32(i+4);let jsonString=new TextDecoder("utf-8").decode(arrayBuffer.slice(i+8,i+8+size));const json=JSON.parse(jsonString.trimEnd());slices=json.sr!==masterSR?json.dcs.map((slice=>({s:Math.round(slice.s/json.sr*masterSR),e:Math.round(slice.e/json.sr*masterSR),n:slice.n}))):json.dcs}}}catch(e){slices=!1}try{return files[pushToTop?"unshift":"push"]({file:{lastModified:file.lastModified,name:getUniqueName(files,file.name),filename:file.name,path:fullPath.replace(file.name,""),size:file.size,type:file.type},buffer:audioArrayBuffer,meta:{length:audioArrayBuffer.length,duration:Number(audioArrayBuffer.length/masterSR).toFixed(3),startFrame:0,endFrame:audioArrayBuffer.length,checked:checked,id:uuid,channel:audioArrayBuffer.numberOfChannels>1?"L":"",slices:slices,note:noteFromFileName(file.name)}}),unsorted.push(uuid),uuid}catch(err){return{uuid:uuid,failed:!0}}},renderListWhenReady=(count,fileCount)=>{(count=count.filter((c=>!1!==c))).every((c=>unsorted.includes(c)))?renderList():setTimeout((()=>renderListWhenReady(count)),1e3)},setLoadingProgress=(count,total)=>{let progress=count/total*100;document.getElementById("loadingText").style.backgroundImage=`linear-gradient(90deg, #cf8600 ${progress}%, #606c76 ${progress+1}%, #606c76 100%)`},getRandomFileSelectionFrom=fileCollection=>[...fileCollection].sort((f=>crypto.randomUUID().localeCompare(crypto.randomUUID()))).slice(0,sliceGrid>0?sliceGrid:256),consumeFileInput=(event,inputFiles)=>{document.getElementById("loadingText").textContent="Loading samples",document.body.classList.add("loading");if(checkAudioContextState())return;let _files=[...inputFiles].filter((f=>["syx","wav","flac","aif","webm","m4a"].includes(f?.name?.split(".")?.reverse()[0].toLowerCase()))),_mFiles=[...inputFiles].filter((f=>["ot"].includes(f?.name?.split(".")?.reverse()[0].toLowerCase())));var fileCollection;if((event.shiftKey||modifierKeys.shiftKey)&&(fileCollection=_files,_files=[...fileCollection].sort((f=>crypto.randomUUID().localeCompare(crypto.randomUUID()))).slice(0,sliceGrid>0?sliceGrid:256)),importFileLimit&&_files.length>750&&(_files=_files.slice(0,750)),_mFiles.forEach(((file,idx)=>{const reader=new FileReader;reader.onload=function(e){if(file.uuid=crypto.randomUUID(),file.fullPath=file.fullPath||"",file.name.toLowerCase().endsWith(".ot")){const buffer=e.target.result,bufferByteLength=buffer.byteLength,bufferUint8Array=new Uint8Array(buffer,0,bufferByteLength);parseOt(bufferUint8Array,file,file.fullPath)}},reader.readAsArrayBuffer(file)})),0===_files.length)return renderList();const checkCount=(idx,filesLength)=>{count.every((c=>unsorted.includes(c)))&&setTimeout((()=>renderListWhenReady(count)),1e3)};let count=[];_files.forEach(((file,idx)=>{const reader=new FileReader;reader.onload=async function(e){file.uuid=crypto.randomUUID(),file.fullPath=file.fullPath||"";const buffer=e.target.result;if(file.name.toLowerCase().endsWith(".syx")||file.name.toLowerCase().endsWith(".aif")){const bufferByteLength=buffer.byteLength,bufferUint8Array=new Uint8Array(buffer,0,bufferByteLength);count.push(file.uuid);let result=file.name.toLowerCase().endsWith(".aif")?await parseAif(buffer,0,file,file.fullPath):parseSds(bufferUint8Array,file,file.fullPath);result.failed&&count.splice(count.findIndex((c=>c===result.uuid)),1),setLoadingProgress(idx+1,_files.length),checkCount(0,_files.length)}if(file.name.toLowerCase().endsWith(".wav")||"audio/wav"===file.type||file.name.toLowerCase().endsWith(".flac")||file.name.toLowerCase().endsWith(".webm")||file.name.toLowerCase().endsWith(".m4a")){count.push(file.uuid);const fb=buffer.slice(0);await audioCtx.decodeAudioData(buffer,(data=>{let result=parseWav(data,fb,file,file.fullPath);result.failed&&count.splice(count.findIndex((c=>c===result.uuid)),1),setLoadingProgress(idx+1,_files.length),checkCount(0,_files.length)}),(error=>{count.splice(count.findIndex((c=>c===file.uuid)),1),setLoadingProgress(idx+1,_files.length),checkCount(0,_files.length)}))}},reader.readAsArrayBuffer(file)})),digichain.importInt&&clearInterval(digichain.importInt),digichain.importInt=setInterval((()=>{document.body.classList.contains("loading")||(_files.forEach(((v,i)=>delete _files[i])),_files=[],_mFiles=[],count=[],clearInterval(digichain.importInt))}),1e4)};uploadInput.addEventListener("change",(()=>consumeFileInput({shiftKey:modifierKeys.shiftKey},uploadInput.files)),!1),document.body.addEventListener("dragover",(event=>{event.preventDefault()}),!1),document.body.addEventListener("drop",(event=>{if(event.preventDefault(),event?.dataTransfer?.items?.length&&"string"===event?.dataTransfer?.items[0].kind)try{return void event?.dataTransfer?.items[0].getAsString((async link=>{let linkedFile=await fetch(link);if(!linkedFile.url.includes(".wav"))return;let buffer=await linkedFile.arrayBuffer();const fb=buffer.slice(0);await audioCtx.decodeAudioData(buffer,(data=>parseWav(data,fb,{lastModified:(new Date).getTime(),name:linkedFile.url.split("/").reverse()[0],size:masterBitDepth*masterSR*(buffer.length/masterSR)/8*buffer.numberOfChannels/1024,type:"audio/wav"},"",!0))),renderList()}))}catch(e){}if(event?.dataTransfer?.items?.length){let toConsume=[],total=event.dataTransfer.items.length;toConsume.count=0;const addItem=item=>{if(item.isFile)item.file((file=>{file.fullPath=item.fullPath.replace("/",""),toConsume.push(file)})),toConsume.count++,total--;else if(item.isDirectory){item.createReader().readEntries((entries=>{total+=entries.length;for(const entry of entries)addItem(entry);total--}))}};for(const entry of event.dataTransfer.items){const itemAsEntry=entry.getAtEntry?entry.getAtEntry():entry.webkitGetAsEntry();itemAsEntry&&addItem(itemAsEntry)}let doneInterval=setInterval((()=>{total<=0&&toConsume.count===toConsume.length&&(clearInterval(doneInterval),consumeFileInput(event,toConsume))}),500)}else{let target=event.target;if(document.getElementById("opExportPanel").classList.contains("show"))return;for(;!target.classList.contains("file-row");)target=target.parentElement||document.body,target="THEAD"===target.nodeName?document.querySelector("tr.file-row"):target,target=target===document.body?document.querySelector("tr.file-row:last-of-type"):target;if(target){let selectedRowId=getFileIndexById(lastSelectedRow.dataset.id),targetRowId=getFileIndexById(target.dataset.id),item=files.splice(selectedRowId,1)[0];files.splice(targetRowId,0,item),0===targetRowId?target.before(lastSelectedRow):target.after(lastSelectedRow)}}}),!1),document.body.addEventListener("keyup",(event=>{clearModifiers()})),document.body.addEventListener("keydown",(event=>{const numberKeys=["Digit1","Digit2","Digit3","Digit4","Digit5","Digit6","Digit7","Digit8","Digit9","Digit0"],eventCodes=["ArrowDown","ArrowUp","Escape","Enter","KeyD","KeyE","KeyG","KeyH","KeyI","KeyL","KeyP","KeyR","KeyS","KeyX",...numberKeys];if(!keyboardShortcutsDisabled){if(event.shiftKey&&document.body.classList.add("shiftKey-down"),event.ctrlKey&&document.body.classList.add("ctrlKey-down"),"Escape"===event.code)return!files.length||event.shiftKey||modifierKeys.shiftKey||files.filter((f=>f.meta.playing&&f.meta.id)).forEach((f=>stopPlayFile(!1,f.meta.id))),closePopUps();if(!([...document.querySelectorAll(".pop-up")].some((w=>w.classList.contains("show")))||document.querySelectorAll("dialog[open]").length>0)){if(numberKeys.includes(event.code)){let id=+event.code.charAt(event.code.length-1);const selected=files.filter((f=>f.meta.checked));id=0===id?9:id-1,selected[id]&&(event.altKey?stopPlayFile(!1,selected[id].meta.id):playFile(!1,selected[id].meta.id,event.shiftKey||modifierKeys.shiftKey))}if("ArrowDown"!==event.code||lastSelectedRow&&lastSelectedRow.isConnected)if(files.length&&"KeyI"===event.code)0!==files.length&&(files.forEach((file=>file.meta.checked=!file.meta.checked)),renderList());else{if(files.length&&"KeyE"===event.code){const editPanelEl=document.getElementById("editPanel");return(event.shiftKey||modifierKeys.shiftKey)&&setTimeout((()=>{if(editPanelEl.open){const editFileNameEl=document.getElementById("editFileName"),editFilePathEl=document.getElementById("editFilePath");editFileNameEl.removeAttribute("readonly"),editFilePathEl.removeAttribute("readonly"),editFileNameEl.focus()}}),100),!!lastSelectedRow&&showEditPanel(lastSelectedRow.dataset.id)}if("KeyH"===event.code&&(event.shiftKey||modifierKeys.shiftKey)&&toggleOptionsPanel(),"KeyG"===event.code&&(event.shiftKey||modifierKeys.shiftKey)&&(document.body.classList.contains("grid-view")?document.body.classList.remove("grid-view"):document.body.classList.add("grid-view")),eventCodes.includes(event.code)&&lastSelectedRow&&lastSelectedRow?.isConnected)if("ArrowDown"===event.code&&lastSelectedRow.nextElementSibling){if(!event.shiftKey&&!modifierKeys.shiftKey)return handleRowClick(0,lastSelectedRow.nextElementSibling.dataset.id);let idx=getFileIndexById(lastSelectedRow.dataset.id),item=files.splice(idx,1)[0];files.splice(idx+1,0,item),lastSelectedRow.nextElementSibling.after(lastSelectedRow),lastSelectedRow.scrollIntoViewIfNeeded(!0),setCountValues()}else if("ArrowUp"===event.code&&lastSelectedRow.previousElementSibling){if(!event.shiftKey&&!modifierKeys.shiftKey)return handleRowClick(0,lastSelectedRow.previousElementSibling.dataset.id);let idx=getFileIndexById(lastSelectedRow.dataset.id),item=files.splice(idx,1)[0];files.splice(idx-1,0,item),lastSelectedRow.previousElementSibling.before(lastSelectedRow),lastSelectedRow.scrollIntoViewIfNeeded(!0),setCountValues()}else if("Enter"===event.code)toggleCheck(event,lastSelectedRow.dataset.id);else if("KeyP"===event.code)event.altKey?stopPlayFile(!1,lastSelectedRow.dataset.id):playFile(event,lastSelectedRow.dataset.id);else if(1===masterChannels&&("KeyL"===event.code||"KeyR"===event.code||"KeyS"===event.code||"KeyD"===event.code)){getFileById(lastSelectedRow.dataset.id).meta.channel&&changeChannel(event,lastSelectedRow.dataset.id,event.code.replace("Key",""))}}else lastSelectedRow=document.querySelector("#fileList tr")}}})),window.addEventListener("beforeunload",(event=>{files=[],unsorted=[],metaFiles=[],audioCtx.close()})),pitchExports(pitchModifier,!0),document.querySelector(".touch-buttons").classList[showTouchModifierKeys?"remove":"add"]("hidden"),null===localStorage.getItem("darkModeTheme")&&(darkModeTheme=window.matchMedia("(prefers-color-scheme: dark)").matches,localStorage.setItem("darkModeTheme",JSON.stringify(darkModeTheme))),document.querySelector(".logo h3").dataset.version=document.querySelector("meta[name=version]").content,document.body.classList[darkModeTheme?"remove":"add"]("light"),document.body.classList[normalizeContrast?"add":"remove"]("normalize-contrast"),restoreLastUsedAudioConfig?changeAudioConfig({target:document.getElementById("audioConfigOptions")},lastUsedAudioConfig):setEditorConf({audioCtx:audioCtx,masterSR:masterSR,masterChannels:masterChannels,masterBitDepth:masterBitDepth}),setTimeout((()=>toggleOptionsPanel()),250),"launchQueue"in window&&window.launchQueue.setConsumer((launchParams=>{launchParams.files&&launchParams.files.length&&consumeFileInput({},launchParams.files)}));const inEdge=(navigator?.userAgentData?.brands??[]).find((b=>b.brand.includes("Edge")));inEdge||document.querySelector(".load-file-label").classList.remove("hide"),window.digichain={sliceOptions:sliceOptions,changeAudioConfig:changeAudioConfig,removeSelected:removeSelected,toggleSelectedActionsList:toggleSelectedActionsList,trimRightSelected:trimRightSelected,truncateSelected:truncateSelected,normalizeSelected:normalizeSelected,reverseSelected:reverseSelected,pitchUpSelected:pitchUpSelected,showMergePanel:showMergePanel,sort:sort,selectedHeaderClick:selectedHeaderClick,renderList:renderList,renderRow:renderRow,joinAll:joinAllUICall,performMergeUiCall:performMergeUiCall,selectSliceAmount:selectSliceAmount,showInfo:showInfo,toggleCheck:toggleCheck,move:move,playFile:playFile,stopPlayFile:stopPlayFile,downloadFile:downloadFile,downloadAll:downloadAll,changeChannel:changeChannel,changePan:changePan,duplicate:duplicate,remove:remove,handleRowClick:handleRowClick,rowDragStart:rowDragStart,splitAction:splitAction,splitEvenly:splitEvenly,splitFromFile:splitFromFile,splitSizeAction:splitSizeAction,splitFromTrack:splitFromTrack,toggleModifier:toggleModifier,toggleOptionsPanel:toggleOptionsPanel,showExportSettingsPanel:showExportSettingsPanel,showEditPanel:showEditPanel,pitchExports:pitchExports,toggleSetting:toggleSetting,toggleSecondsPerFile:toggleSecondsPerFile,changeOpParam:changeOpParam,toggleHelp:toggleHelp,toggleChainNamePanel:toggleChainNamePanel,changeChainName:changeChainName,generateChainNames:generateChainNames,editor:editor};