import{Resampler,audioBufferToWav}from"./resources.min.js";const uploadInput=document.getElementById("uploadInput"),listEl=document.getElementById("fileList"),DefaultSliceOptions=[0,4,8,16,32,64,120],audioConfigOptions={m4410016:{sr:44100,bd:16,c:1},s4410016:{sr:44100,bd:16,c:2},m4410024:{sr:44100,bd:24,c:1},s4410024:{sr:44100,bd:24,c:2},m4800016:{sr:48e3,bd:16,c:1},s4800016:{sr:48e3,bd:16,c:2},m4800024:{sr:48e3,bd:24,c:1},s4800024:{sr:48e3,bd:24,c:2}};let lastSelectedRow,masterSR=48e3,masterBitDepth=16,masterChannels=1,audioCtx=new AudioContext({sampleRate:masterSR}),files=[],unsorted=[],lastSort="",sliceGrid=0,sliceOptions=Array.from(DefaultSliceOptions),modifierKeys={shiftKey:!1,ctrlKey:!1};function changeAudioConfig(event){const selection=event?.target?.selectedOptions[0]?.value||"m4800016";if(files.length>0&&audioConfigOptions[selection].sr!==masterSR){if(!confirm("Changing audio export sample rate will remove all files from the sample list.\n\n Do you want to continue?"))return event.target.selectedIndex=[...event.target.options].findIndex((s=>s.value===event.target.dataset.selection)),!1}files=audioConfigOptions[selection].sr!==masterSR?[]:files,[masterSR,masterBitDepth,masterChannels]=[audioConfigOptions[selection].sr,audioConfigOptions[selection].bd,audioConfigOptions[selection].c],event.target.dataset.selection=selection,audioCtx=new AudioContext({sampleRate:masterSR}),renderList()}const getFileById=id=>files.find((f=>f.meta.id===id)),getFileIndexById=id=>files.findIndex((f=>f.meta.id===id)),getRowElementById=id=>document.querySelector(`tr[data-id="${id}"]`),toggleModifier=key=>{"shiftKey"!==key&&"ctrlKey"!==key||(modifierKeys[key]=!modifierKeys[key],document.getElementById("modifierKey"+key).classList[modifierKeys[key]?"add":"remove"]("active"),document.body.classList[modifierKeys[key]?"add":"remove"](key+"-mod-down"))};function setWavLink(file,linkEl){const fileName=getNiceFileName("",file),wav=audioBufferToWav(file.buffer,file.meta,masterSR,masterBitDepth,masterChannels),blob=new window.Blob([new DataView(wav)],{type:"audio/wav"});return linkEl.href=URL.createObjectURL(blob),linkEl.setAttribute("download",fileName),linkEl}async function downloadAll(){const _files=files.filter((f=>f.meta.checked)),links=[];if(_files.length>5){if(!confirm(`You are about to download ${_files.length} files, that will show ${_files.length} pop-ups one after each other..\n\nAre you ready for that??`))return}for(const file of _files){const link=await downloadFile(file.meta.id);links.push(link)}const intervalId=setInterval((()=>{const lnk=links.shift();lnk?.click(),0===links.length&&lnk&&clearInterval(intervalId)}),500)}function downloadFile(id){const el=getRowElementById(id).querySelector(".wav-link-hidden");return setWavLink(getFileById(id),el)}function removeSelected(){files.forEach((f=>f.meta.checked?f.source?.stop():"")),files=files.filter((f=>!f.meta.checked)),unsorted=unsorted.filter((id=>files.find((f=>f.meta.id===id)))),renderList()}function showInfo(){const description=document.querySelector("meta[name=description]").content;document.querySelector(".info-panel-md .content").innerHTML=`\n    <h3>DigiChain</h3>\n    <p>${description}</p>\n    <p class="float-right"><a href="https://brianbar.net/" target="_blank">Brian Barnett</a>\n    (<a href="https://www.youtube.com/c/sfxBrian" target="_blank">sfxBrian</a> / <a href="https://github.com/brian3kb" target="_blank">brian3kb</a>) </p>\n`,document.querySelector(".info-panel-md").style.display="block"}function getMonoFloat32ArrayFromBuffer(buffer,channel,getAudioBuffer=!1){let result=getAudioBuffer?audioCtx.createBuffer(masterChannels,buffer.length,masterSR):new Float32Array(buffer.length);if("S"===channel)for(let i=0;i<buffer.length;i++)(getAudioBuffer?result.getChannelData(0):result)[i]=(buffer.getChannelData(0)[i]+buffer.getChannelData(1)[i])/2;else{const _channel="R"===channel?1:0;for(let i=0;i<buffer.length;i++)(getAudioBuffer?result.getChannelData(0):result)[i]=buffer.getChannelData(_channel)[i]}return result}function joinToMono(audioArrayBuffer,_files,totalLength,largest,pad){let totalWrite=0;_files.forEach(((file,idx)=>{const bufferLength=pad?largest:file.buffer.length;let result=getMonoFloat32ArrayFromBuffer(file.buffer,file?.meta?.channel);for(let i=0;i<bufferLength;i++)audioArrayBuffer.getChannelData(0)[totalWrite]=result[i],totalWrite++}))}function joinToStereo(audioArrayBuffer,_files,totalLength,largest,pad){let totalWrite=0;_files.forEach(((file,idx)=>{const bufferLength=pad?largest:file.buffer.length;let result=[new Float32Array(file.buffer.length),new Float32Array(file.buffer.length)];for(let i=0;i<file.buffer.length;i++)result[0][i]=file.buffer.getChannelData(0)[i],result[1][i]=file.buffer.getChannelData(2===file.buffer.numberOfChannels?1:0)[i];for(let i=0;i<bufferLength;i++)audioArrayBuffer.getChannelData(0)[totalWrite]=result[0][i],audioArrayBuffer.getChannelData(1)[totalWrite]=result[1][i],totalWrite++}))}function joinAll(event,pad=!1,filesRemaining=[],fileCount=0,toInternal=!1){if(0===files.length)return;(event.shiftKey||modifierKeys.shiftKey)&&(toInternal=!0);let _files=filesRemaining.length>0?filesRemaining:files.filter((f=>f.meta.checked)),tempFiles=_files.splice(0,sliceGrid>0?sliceGrid:_files.length);if(filesRemaining=Array.from(_files),_files=tempFiles,pad&&0!==sliceGrid&&0!==_files.length)for(;_files.length!==sliceGrid;)_files.push(_files[_files.length-1]);const largest=_files.reduce(((big,cur)=>big>cur.buffer.length?big:cur.buffer.length),0),totalLength=_files.reduce(((total,file)=>total+=pad?largest:file.buffer.length),0),audioArrayBuffer=audioCtx.createBuffer(masterChannels,totalLength,masterSR);1===masterChannels&&joinToMono(audioArrayBuffer,_files,totalLength,largest,pad),2===masterChannels&&joinToStereo(audioArrayBuffer,_files,totalLength,largest,pad);const joinedEl=document.getElementById("getJoined"),fileData={file:{name:`joined_${pad?"spaced_":""}${fileCount+1}.wav`},buffer:audioArrayBuffer,meta:{}};if(toInternal){setWavLink(fileData,joinedEl);const wav=audioBufferToWav(fileData.buffer,fileData.meta,masterSR,masterBitDepth,masterChannels),blob=new window.Blob([new DataView(wav)],{type:"audio/wav"}),fileReader=new FileReader;fileReader.readAsArrayBuffer(blob),fileReader.fileCount=fileCount,fileReader.onload=e=>{audioCtx.decodeAudioData(e.target.result,(function(buffer){parseWav(buffer,{lastModified:(new Date).getTime(),name:`resample_${pad?"spaced_":""}${fileReader.fileCount+1}.wav`,size:masterBitDepth*masterSR*(buffer.length/masterSR)/8*buffer.numberOfChannels/1024,type:"audio/wav"}),renderList()}))}}else setWavLink(fileData,joinedEl).click();filesRemaining.length>0?(fileCount++,joinAll(event,pad,filesRemaining,fileCount,toInternal)):renderList()}const playFile=(event,id,loop)=>{const file=getFileById(id);loop=loop||event.shiftKey||modifierKeys.shiftKey||!1,file.source&&file.source.stop(),file.source=audioCtx.createBufferSource(),file.source.buffer=file.meta.channel&&1===masterChannels?getMonoFloat32ArrayFromBuffer(file.buffer,file.meta.channel,!0):file.buffer,file.source.connect(audioCtx.destination),file.source.loop=loop,file.source.start()},toggleCheck=(event,id)=>{const el=getRowElementById(id).querySelector(".toggle-check"),file=getFileById(id);event.preventDefault(),file.meta.checked=!file.meta.checked,file.meta.checked?el.classList.remove("button-outline"):el.classList.add("button-outline"),file.meta.checked||file.source?.stop(),lastSort="",setCountValues()},changeChannel=(event,id,channel)=>{const el=getRowElementById(id).querySelector(".channel-option-"+channel),file=getFileById(id);if(event.shiftKey||modifierKeys.shiftKey){return confirm(`Confirm setting all selected samples that are stereo to ${{L:"audio from the Left channel",R:"audio from the Right channel",S:"Sum both channels of audio to mono"}[channel]}?`)&&files.filter((f=>f.meta.checked)).forEach((f=>f.meta.channel=channel)),renderList()}file.meta.channel=channel,file.waveform.getContext("2d").clear(),drawWaveform(file,file.waveform,file.buffer.numberOfChannels),getRowElementById(id).querySelectorAll(".channel-options a").forEach((opt=>opt.classList.remove("selected"))),el.classList.add("selected")},invertFileSelection=()=>{0!==files.length&&(files.forEach((file=>file.meta.checked=!file.meta.checked)),renderList())},changeSliceOption=(targetEl,size,silent=!1)=>{let newValue=size;return silent||(newValue=prompt(`Change slice value "${size}" to what new value?`)),newValue&&!isNaN(newValue)&&(newValue=Math.abs(Math.ceil(+newValue)),sliceOptions[targetEl.dataset.sel]=+newValue,targetEl.textContent=newValue),+newValue},selectSliceAmount=(event,size)=>{if(event.target){if(event.ctrlKey||modifierKeys.ctrlKey)return 0===size?(DefaultSliceOptions.forEach(((option,index)=>changeSliceOption(document.querySelector(`.master-slices .sel-${index}`),option,!0))),sliceOptions=Array.from(DefaultSliceOptions),selectSliceAmount({shiftKey:!0},0)):selectSliceAmount({shiftKey:!0},changeSliceOption(event.target,size));if(sliceGrid=size,sliceOptions.forEach(((option,index)=>{const el=document.querySelector(`.master-slices .sel-${index}`);option===size?el.classList.remove("button-outline"):el.classList.add("button-outline")})),setCountValues(),0===size&&files.forEach((f=>f.source?.stop())),!event.shiftKey&&!modifierKeys.shiftKey){files.forEach((f=>f.meta.checked=!1));for(let i=0;i<(size<files.length?size:files.length);i++)toggleCheck(event,files[i].meta.id);renderList()}}},duplicate=(event,id)=>{const file=getFileById(id),fileIdx=getFileIndexById(id),item=Object.assign({},file);item.meta=Object.assign({},file.meta),item.meta.dupeOf=id,item.waveform=!1,item.meta.id=crypto.randomUUID(),files.splice(event.shiftKey||modifierKeys.shiftKey?files.length:fileIdx+1,0,item),unsorted.push(item.meta.id),renderList()},splitEvenly=(event,id,slices)=>{const file=getFileById(id),frameSize=file.buffer.length/slices;for(let i=0;i<slices;i++){const audioArrayBuffer=audioCtx.createBuffer(file.buffer.numberOfChannels,frameSize,file.buffer.sampleRate),slice={},uuid=crypto.randomUUID();slice.buffer=audioArrayBuffer,slice.file={...file.file},slice.meta={length:audioArrayBuffer.length,duration:Number(audioArrayBuffer.length/masterSR).toFixed(3),startFrame:0,endFrame:audioArrayBuffer.length,checked:!0,id:uuid,sliceNumber:`${file.meta.sliceNumber?file.meta.sliceNumber+"-":""}${i+1}`,slicedFrom:file.meta.id,channel:audioArrayBuffer.numberOfChannels>1?"L":""},file.buffer.getChannelData(0).slice(i*frameSize,i*frameSize+frameSize).forEach(((a,idx)=>slice.buffer.getChannelData(0)[idx]=a)),2===file.buffer.numberOfChannels&&file.buffer.getChannelData(1).slice(i*frameSize,i*frameSize+frameSize).forEach(((a,idx)=>slice.buffer.getChannelData(1)[idx]=a)),files.push(slice),unsorted.push(uuid)}renderList()},remove=id=>{const fileIdx=getFileIndexById(id);files.splice(fileIdx,1);const unsortIdx=unsorted.findIndex((uuid=>uuid===id));unsorted.splice(unsortIdx,1),renderList()},move=(event,id,direction)=>{const from=getFileIndexById(id);let item,to=1===direction?from+1:from-1;-1===to&&(to=files.length-1),to>=files.length&&(to=0),item=files.splice(from,1)[0],event.shiftKey||modifierKeys.shiftKey?from>to?files.splice(0,0,item):files.splice(files.length,0,item):files.splice(to,0,item),renderList()},sort=by=>{"id"===by?(files=unsorted.map((key=>files.find((f=>f.meta.id===key)))),lastSort=""):lastSort===by?files.reverse():(files="name"===by?files.sort(((a,b)=>a.file[by].localeCompare(b.file[by]))):files.sort(((a,b)=>a.meta[by]-b.meta[by])),lastSort=by),renderList()},handleRowClick=(event,id)=>{const row=getRowElementById(id);lastSelectedRow&&lastSelectedRow.classList.remove("selected"),row.classList.add("selected"),lastSelectedRow=row,lastSelectedRow.scrollIntoViewIfNeeded()},rowDragStart=event=>{event.target?.classList?.contains("file-row")&&(lastSelectedRow=event.target)},splitAction=(event,id,slices)=>{const el=document.getElementById("splitOptions"),fileNameEl=document.getElementById("splitFileName");let item;if(id&&(lastSelectedRow=getRowElementById(id)),item=getFileById(id||lastSelectedRow.dataset.id),slices)return id=id||item.meta.id,splitEvenly(0,id,slices),el.style.display="none";fileNameEl.textContent=getNiceFileName("",item,!0),el.style.display="block"},draw=(normalizedData,id,canvas)=>{const drawLineSegment=(ctx,x,height,width,isEven)=>{ctx.lineWidth=1,ctx.strokeStyle="#a8a8a8",ctx.beginPath(),height=isEven?height:-height,ctx.moveTo(x,0),ctx.lineTo(x,height),ctx.arc(x+width/2,height,width/2,Math.PI,0,isEven),ctx.lineTo(x+width,0),ctx.stroke()};window.devicePixelRatio;canvas.width=150,canvas.height=60;const ctx=canvas.getContext("2d");ctx.translate(0,canvas.offsetHeight/2+0);const width=canvas.offsetWidth/normalizedData.length;for(let i=0;i<normalizedData.length;i++){const x=width*i;let height=normalizedData[i]/2*canvas.offsetHeight-0;height<0?height=0:height>canvas.offsetHeight/2&&(height=height>canvas.offsetHeight/2),drawLineSegment(ctx,x,height,width,(i+1)%2)}},secondsToMinutes=time=>{const mins=Math.floor(time/60),seconds=Number(time%60).toFixed(2);return mins>0?`${mins}m ${Math.round(+seconds)}s`:`${seconds}s`},setCountValues=()=>{const filesSelected=files.filter((f=>f.meta.checked)),selectionCount=filesSelected.length,filesDuration=files.reduce(((a,f)=>a+ +f.meta.duration),0),filesSelectedDuration=filesSelected.reduce(((a,f)=>a+ +f.meta.duration),0);document.getElementById("fileNum").textContent=`${files.length}/${selectionCount}`,document.querySelector(".selection-count").textContent=` ${selectionCount||"-"} `,document.querySelectorAll(".join-count").forEach((el=>el.textContent=` ${0===selectionCount?"-":selectionCount>0&&sliceGrid>0?Math.ceil(selectionCount/sliceGrid):"1"} `)),document.getElementById("lengthHeaderLink").textContent=`Length (${secondsToMinutes(filesSelectedDuration)}/${secondsToMinutes(filesDuration)})`},getNiceFileName=(name,file,excludeExtension)=>{const fname=file?`${file.file.name.replace(/\.[^.]*$/,"")}${file.meta?.dupeOf?"-d":""}${file.meta?.sliceNumber?"-s"+file.meta.sliceNumber:""}.wav`:name.replace(/\.syx$|\.wav$/,"");return excludeExtension?fname.replace(/\.[^.]*$/,""):fname},drawWaveform=(file,el,channel)=>{let drawData=[],drawResolution=Math.floor(file.buffer.length/20);2===masterChannels&&file.buffer.numberOfChannels>1&&(channel="S"),drawResolution=drawResolution>4096?4096:drawResolution;for(let y=0;y<file.buffer.length;y+=Math.floor(file.buffer.length/drawResolution))"S"===channel?drawData.push((file.buffer.getChannelData(0)[y]+file.buffer.getChannelData(1)[y])/2):drawData.push(file.buffer.getChannelData("R"===channel?1:0)[y]);draw(drawData,file.meta.id,el)},renderList=()=>{listEl.innerHTML=files.map((f=>`\n      <tr class="file-row" data-id="${f.meta.id}"\n          onclick="digichain.handleRowClick(event, '${f.meta.id}')"\n          onmousedown="digichain.handleRowClick(event, '${f.meta.id}')"  \n          ondragstart="digichain.rowDragStart(event)" draggable="true">\n        <td>\n            <i class="gg-more-vertical"></i>\n        </td>\n        <td>\n            <button onclick="digichain.toggleCheck(event, '${f.meta.id}')" class="${f.meta.checked?"":"button-outline"} check toggle-check">&nbsp;</button>\n        </td>\n        <td>\n            <button title="Move up in sample list." onclick="digichain.move(event, '${f.meta.id}', -1)" class="button-clear move-up"><i class="gg-chevron-up-r has-shift-mod-i"></i></button>\n        </td>\n        <td>\n            <button title="Move down in sample list." onclick="digichain.move(event, '${f.meta.id}', 1)" class="button-clear move-down"><i class="gg-chevron-down-r has-shift-mod-i"></i></button>\n        </td>\n        <td>\n            <canvas onclick="digichain.playFile(event, '${f.meta.id}')" class="waveform waveform-${f.meta.id}"></canvas>\n        </td>\n        <td>\n            <a title="Download processed wav file of sample." class="wav-link" onclick="digichain.downloadFile('${f.meta.id}').click()">${getNiceFileName(f.file.name)}</a>\n            ${f.meta.dupeOf?" d":""}\n            ${f.meta.sliceNumber?" s"+f.meta.sliceNumber:""}\n            <a class="wav-link-hidden" target="_blank"></a>\n        </td>\n        <td>\n            <span>${f.meta.duration} s</span>\n        </td>\n        <td>\n            <div class="channel-options has-shift-mod" style="display: ${f.buffer.numberOfChannels>1&&1===masterChannels?"block":"none"}">\n            <a title="Left channel" onclick="digichain.changeChannel(event, '${f.meta.id}', 'L')" class="${"L"===f.meta.channel?"selected":""} channel-option-L">L</a>\n            <a title="Sum to mono" onclick="digichain.changeChannel(event, '${f.meta.id}', 'S')" class="${"S"===f.meta.channel?"selected":""} channel-option-S">S</a>\n            <a title="Right channel" onclick="digichain.changeChannel(event, '${f.meta.id}', 'R')" class="${"R"===f.meta.channel?"selected":""} channel-option-R">R</a>\n            </div>\n            <div class="channel-options channel-options-stereo" title="${1===f.buffer.numberOfChannels?"Mono sample":"Stereo sample"}" style="display: ${2===masterChannels?"block":"none"}">\n                <i class="gg-shape-circle"></i>\n                <i class="gg-shape-circle stereo-circle" style="display: ${2===f.buffer.numberOfChannels?"inline-block":"none"}"></i>\n            </div>\n        </td>\n        <td>\n            <button title="Slice sample." onclick="digichain.splitAction(event, '${f.meta.id}')" class="button-clear split gg-menu-grid-r"><i class="gg-menu-grid-r"></i></button>\n        </td>\n        <td>\n            <button title="Duplicate sample." onclick="digichain.duplicate(event, '${f.meta.id}')" class="button-clear duplicate"><i class="gg-duplicate has-shift-mod-i"></i></button>\n        </td>\n        <td>\n            <button title="Remove sample (double-click)." ondblclick="digichain.remove('${f.meta.id}')" class="button-clear remove"><i class="gg-trash"></i></button>\n        </td>\n      </tr>\n    `)).join(""),0===files.length&&(listEl.innerHTML='<tr><td colspan="9" class="no-files"><h4>Load/Drag in some samples to get started...</h4></td></tr>'),document.querySelectorAll(".waveform").forEach(((el,i)=>{files[i].waveform?el.replaceWith(files[i].waveform):(drawWaveform(files[i],el,files[i].buffer.numberOfChannels),files[i].waveform=el)})),setCountValues(),document.body.classList.remove("loading")},bytesToInt=(bh,bm,bl)=>((127&bh)<<7<<7)+((127&bm)<<7)+(127&bl),parseSds=(fd,file)=>{if(240!==fd[0]||126!==fd[1]||1!==fd[3]||247!==fd[20])return!1;const uuid=crypto.randomUUID(),bitRate=fd[6],sampleRate=10*Math.ceil(1e8/bytesToInt(fd[9],fd[8],fd[7])),length=bytesToInt(fd[12],fd[11],fd[10]);let loopStart=bytesToInt(fd[15],fd[14],fd[13]),loopEnd=bytesToInt(fd[18],fd[17],fd[16])+1;const loopType=fd[19];if(127===loopType&&(loopStart=loopEnd=length),sampleRate<4e3||sampleRate>96e3)return!1;if(16!==bitRate)return!1;let idx=fd.findIndex(((x,i)=>240===x&&126===fd[i+1]&&2===fd[i+3]&&247===fd[i+126])),lengthRead=0,data=[];for(;lengthRead<length;){for(let t=idx+5;t<idx+125&&lengthRead<length;t+=3)data[lengthRead++]=(fd[t]<<9|fd[t+1]<<2|fd[t+2]>>5)-32768;idx+=127}const resample=new Resampler(sampleRate,masterSR,1,data.filter((x=>void 0!==x)));resample.resampler(resample.inputBuffer.length);const audioArrayBuffer=audioCtx.createBuffer(1,resample.outputBuffer.length-resample.outputBuffer.length/120*5,masterSR);return resample.outputBuffer.filter((x=>void 0!==x)).forEach(((y,i)=>audioArrayBuffer.getChannelData(0)[i]=y/32767)),files.push({file:{lastModified:file.lastModified,name:file.name,size:file.size,type:file.type},buffer:audioArrayBuffer,meta:{length:resample.outputBuffer.length,loopStart:loopStart,loopEnd:loopEnd,loopType:loopType,duration:Number(resample.outputBuffer.length/masterSR).toFixed(3),startFrame:0,endFrame:resample.outputBuffer.length,checked:!0,id:uuid}}),unsorted.push(uuid),uuid},parseWav=(audioArrayBuffer,file)=>{const uuid=crypto.randomUUID();return files.push({file:{lastModified:file.lastModified,name:file.name,size:file.size,type:file.type},buffer:audioArrayBuffer,meta:{length:audioArrayBuffer.length,duration:Number(audioArrayBuffer.length/masterSR).toFixed(3),startFrame:0,endFrame:audioArrayBuffer.length,checked:!0,id:uuid,channel:audioArrayBuffer.numberOfChannels>1?"L":""}}),unsorted.push(uuid),uuid},renderListWhenReady=count=>{(count=count.filter((c=>!1!==c))).every((c=>unsorted.includes(c)))?renderList():setTimeout((()=>renderListWhenReady(count)),1e3)},setLoadingProgress=(count,total)=>{let progress=count/total*100;document.getElementById("loadingText").style.backgroundImage=`linear-gradient(90deg, #cf8600 ${progress}%, #606c76 ${progress+1}%, #606c76 100%)`},consumeFileInput=files=>{let count=[];document.body.classList.add("loading"),[...files].forEach(((file,idx)=>{var reader=new FileReader;reader.onload=async function(e){if(file.name.toLowerCase().endsWith(".syx")){const buffer=e.target.result,bufferByteLength=buffer.byteLength,bufferUint8Array=new Uint8Array(buffer,0,bufferByteLength);count.push(parseSds(bufferUint8Array,file)),setLoadingProgress(idx+1,files.length)}file.name.toLowerCase().endsWith(".wav")&&await audioCtx.decodeAudioData(e.target.result,(data=>{count.push(parseWav(data,file)),setLoadingProgress(idx+1,files.length)}))},reader.readAsArrayBuffer(file)})),setTimeout((()=>renderListWhenReady(count)),500)};uploadInput.addEventListener("change",(()=>consumeFileInput(uploadInput.files)),!1),document.body.addEventListener("dragover",(event=>{event.preventDefault()}),!1),document.body.addEventListener("drop",(event=>{if(event.preventDefault(),event?.dataTransfer?.files?.length)consumeFileInput(event.dataTransfer.files);else{let target=event.target;for(;!target.classList.contains("file-row");)target=target.parentElement||document.body,target="THEAD"===target.nodeName?document.querySelector("tr.file-row"):target,target=target===document.body?document.querySelector("tr.file-row:last-of-type"):target;if(target){let selectedRowId=getFileIndexById(lastSelectedRow.dataset.id),targetRowId=getFileIndexById(target.dataset.id),item=files.splice(selectedRowId,1)[0];files.splice(targetRowId,0,item),0===targetRowId?target.before(lastSelectedRow):target.after(lastSelectedRow)}}}),!1),document.body.addEventListener("keyup",(event=>{event.shiftKey||document.body.classList.remove("shiftKey-down"),event.ctrlKey||document.body.classList.remove("ctrlKey-down")})),document.body.addEventListener("keydown",(event=>{if(event.shiftKey&&document.body.classList.add("shiftKey-down"),event.ctrlKey&&document.body.classList.add("ctrlKey-down"),"ArrowDown"!==event.code||lastSelectedRow&&lastSelectedRow.isConnected){if("Escape"===event.code)return!files.length||event.shiftKey||modifierKeys.shiftKey||files.forEach((f=>f.source?.stop())),document.querySelectorAll(".pop-up").forEach((w=>w.style.display="none"));if(files.length&&"KeyI"===event.code)0!==files.length&&(files.forEach((file=>file.meta.checked=!file.meta.checked)),renderList());else if(["ArrowDown","ArrowUp","Escape","Enter","KeyL","KeyR","KeyS","KeyP","KeyI"].includes(event.code)&&lastSelectedRow&&lastSelectedRow?.isConnected)if("ArrowDown"===event.code&&lastSelectedRow.nextElementSibling){if(!event.shiftKey&&!modifierKeys.shiftKey)return handleRowClick(0,lastSelectedRow.nextElementSibling.dataset.id);let idx=getFileIndexById(lastSelectedRow.dataset.id),item=files.splice(idx,1)[0];files.splice(idx+1,0,item),lastSelectedRow.nextElementSibling.after(lastSelectedRow),lastSelectedRow.scrollIntoViewIfNeeded()}else if("ArrowUp"===event.code&&lastSelectedRow.previousElementSibling){if(!event.shiftKey&&!modifierKeys.shiftKey)return handleRowClick(0,lastSelectedRow.previousElementSibling.dataset.id);let idx=getFileIndexById(lastSelectedRow.dataset.id),item=files.splice(idx,1)[0];files.splice(idx-1,0,item),lastSelectedRow.previousElementSibling.before(lastSelectedRow),lastSelectedRow.scrollIntoViewIfNeeded()}else if("Enter"===event.code)toggleCheck(event,lastSelectedRow.dataset.id);else if("KeyP"===event.code)playFile(event,lastSelectedRow.dataset.id);else if(1===masterChannels&&("KeyL"===event.code||"KeyR"===event.code||"KeyS"===event.code)){getFileById(lastSelectedRow.dataset.id).meta.channel&&changeChannel(event,lastSelectedRow.dataset.id,event.code.replace("Key",""))}}else lastSelectedRow=document.querySelector("#fileList tr")})),window.digichain={sliceOptions:sliceOptions,changeAudioConfig:changeAudioConfig,removeSelected:removeSelected,sort:sort,joinAll:joinAll,selectSliceAmount:selectSliceAmount,showInfo:showInfo,toggleCheck:toggleCheck,move:move,playFile:playFile,downloadFile:downloadFile,downloadAll:downloadAll,changeChannel:changeChannel,duplicate:duplicate,remove:remove,handleRowClick:handleRowClick,rowDragStart:rowDragStart,splitAction:splitAction,splitEvenly:splitEvenly,toggleModifier:toggleModifier};
