import{Resampler,audioBufferToWav}from"./resources.js?v=131";const uploadInput=document.getElementById("uploadInput"),listEl=document.getElementById("fileList"),infoEl=document.getElementById("infoIndicator"),DefaultSliceOptions=[0,4,8,16,32,64,120],audioConfigOptions={m4410016:{sr:44100,bd:16,c:1},s4410016:{sr:44100,bd:16,c:2},m4410024:{sr:44100,bd:24,c:1},s4410024:{sr:44100,bd:24,c:2},m4800016:{sr:48e3,bd:16,c:1},s4800016:{sr:48e3,bd:16,c:2},m4800024:{sr:48e3,bd:24,c:1},s4800024:{sr:48e3,bd:24,c:2}};let lastSelectedRow,workBuffer,masterSR=48e3,masterBitDepth=16,masterChannels=1,pitchModifier=1,zipDownloads=!0,audioCtx=new AudioContext({sampleRate:masterSR}),files=[],unsorted=[],metaFiles=[],lastSort="",sliceGrid=0,sliceOptions=Array.from(DefaultSliceOptions),keyboardShortcutsDisabled=!1,modifierKeys={shiftKey:!1,ctrlKey:!1};function changeAudioConfig(event){const selection=event?.target?.selectedOptions[0]?.value||"m4800016";if(files.length>0&&audioConfigOptions[selection].sr!==masterSR){if(!confirm("Changing audio export sample rate will remove all files from the sample list.\n\n Do you want to continue?"))return event.target.selectedIndex=[...event.target.options].findIndex((s=>s.value===event.target.dataset.selection)),!1}files=audioConfigOptions[selection].sr!==masterSR?[]:files,[masterSR,masterBitDepth,masterChannels]=[audioConfigOptions[selection].sr,audioConfigOptions[selection].bd,audioConfigOptions[selection].c],event.target.dataset.selection=selection,audioCtx=new AudioContext({sampleRate:masterSR}),renderList()}metaFiles.getByFileName=function(filename){return this.find((m=>m.name.replace(/\.[^.]*$/,"")===filename.replace(/\.[^.]*$/,"")))},metaFiles.getByFile=function(file){return!file.meta.slicedFrom&&this.find((m=>m.name.replace(/\.[^.]*$/,"")===file.file.name.replace(/\.[^.]*$/,"")))},metaFiles.removeSelected=function(){files.forEach((f=>{const idx=this.findIndex((i=>i===this.getByFileName(f.file.name)));f.meta.checked&&-1!==idx&&this.splice(idx,1)}))},metaFiles.removeByName=function(filename){const idx=this.findIndex((i=>i===this.getByFileName(filename)));-1!==idx&&this.splice(idx,1)};const getFileById=id=>files.find((f=>f.meta.id===id)),getFileIndexById=id=>files.findIndex((f=>f.meta.id===id)),getRowElementById=id=>document.querySelector(`tr[data-id="${id}"]`),toggleModifier=key=>{"shiftKey"!==key&&"ctrlKey"!==key||(modifierKeys[key]=!modifierKeys[key],document.getElementById("modifierKey"+key).classList[modifierKeys[key]?"add":"remove"]("active"),document.body.classList[modifierKeys[key]?"add":"remove"](key+"-mod-down"))},closePopUps=()=>document.querySelectorAll(".pop-up").forEach((w=>w.classList.remove("show"))),arePopUpsOpen=()=>[...document.querySelectorAll(".pop-up")].some((w=>w.classList.contains("show"))),toggleOptionsPanel=()=>{const buttonsEl=document.getElementById("allOptionsPanel"),toggleButtonEl=document.getElementById("toggleOptionsButton");buttonsEl.classList.contains("hidden")?buttonsEl.classList.remove("hidden"):buttonsEl.classList.add("hidden"),buttonsEl.classList.contains("hidden")?toggleButtonEl.classList.add("collapsed"):toggleButtonEl.classList.remove("collapsed")};function changeEditPoint(event,range){document.querySelector(".slice-range.edit-"+range);const line=document.querySelector("#editLines .line"),editPanelEl=document.getElementById("editPanel");editPanelEl.dataset[range]=event.target.value,"start"===range?(line.style.marginLeft=+editPanelEl.dataset.start+"px",line.style.width=+editPanelEl.dataset.end-+editPanelEl.dataset.start+"px"):line.style.width=+editPanelEl.dataset.end-+editPanelEl.dataset.start+"px"}const renderEditPanelWaveform=item=>{const editPanelWaveformContainerEl=document.querySelector("#editPanel .waveform-container"),editPanelWaveformEl=document.getElementById("editPanelWaveform");drawWaveform(item,editPanelWaveformEl,item.meta.channel,{width:+editPanelWaveformContainerEl.dataset.waveformWidth,height:128})};function perSamplePitch(event,pitchValue,id){const item=getFileById(id||lastSelectedRow.dataset.id),dataset=document.getElementById("editPanel").dataset;dataset.start=dataset.start>-1?dataset.start:0,dataset.end=dataset.end>-1?dataset.end:item.buffer.length;const pitchedWav=audioBufferToWav(item.buffer,item.meta,masterSR*pitchValue,masterBitDepth,item.buffer.numberOfChannels),pitchedBlob=new window.Blob([new DataView(pitchedWav)],{type:"audio/wav"});(async()=>{let linkedFile=await fetch(URL.createObjectURL(pitchedBlob)),arrBuffer=await linkedFile.arrayBuffer();await audioCtx.decodeAudioData(arrBuffer,(buffer=>{item.buffer=buffer,item.meta={...item.meta,length:buffer.length,duration:Number(buffer.length/masterSR).toFixed(3),startFrame:0,endFrame:buffer.length},dataset.start="0",dataset.end=`${buffer.length}`,renderEditPanelWaveform(item),item.waveform=!1,renderList()}))})()}function normalize(event,id){const item=getFileById(id||lastSelectedRow.dataset.id),editPanelEl=document.getElementById("editPanel"),waveformWidth=+document.querySelector("#editPanel .waveform-container").dataset.waveformWidth;let scaleSize=item.buffer.length/waveformWidth;const dataset=editPanelEl.dataset;dataset.start=+dataset.start>-1?dataset.start:0,dataset.end=+dataset.end>-1?dataset.end:item.buffer.length;let maxSample=0;for(let channel=0;channel<item.buffer.numberOfChannels;channel++){let data=item.buffer.getChannelData(channel);for(let i=Math.floor(+dataset.start*scaleSize);i<Math.floor(+dataset.end*scaleSize);i++)maxSample=Math.max(Math.abs(data[i]),maxSample)}maxSample=maxSample||1;for(let channel=0;channel<item.buffer.numberOfChannels;channel++){item.buffer.getChannelData(channel);for(let i=Math.floor(+dataset.start*scaleSize);i<Math.floor(+dataset.end*scaleSize);i++)item.buffer.getChannelData(channel)[i]&&item.buffer.getChannelData(channel)[i]/maxSample!=0&&(item.buffer.getChannelData(channel)[i]=item.buffer.getChannelData(channel)[i]/maxSample)}renderEditPanelWaveform(item),item.waveform=!1}function reverse(event,id){const item=getFileById(id||lastSelectedRow.dataset.id),dataset=document.getElementById("editPanel").dataset;dataset.start=dataset.start>-1?dataset.start:0,dataset.end=dataset.end>-1?dataset.end:item.buffer.length;for(let channel=0;channel<item.buffer.numberOfChannels;channel++){let data=item.buffer.getChannelData(channel).reverse();for(let i=+dataset.start;i<+dataset.end;i++)item.buffer.getChannelData(channel)[i]=data[i]}renderEditPanelWaveform(item),item.waveform=!1}function trimRight(event,id,ampFloor=.003){const item=getFileById(id||lastSelectedRow.dataset.id),dataset=document.getElementById("editPanel").dataset;let trimIndex=[];for(let channel=0;channel<item.buffer.numberOfChannels;channel++){trimIndex.push(item.buffer.length);let data=item.buffer.getChannelData(channel);for(let i=item.buffer.length;i>0;i--)if(Math.abs(data[i])>ampFloor&&void 0!==data[i]&&null!==data[i]){trimIndex[channel]=i+1;break}}const audioArrayBuffer=audioCtx.createBuffer(item.buffer.numberOfChannels,+Math.max(...trimIndex),masterSR);for(let channel=0;channel<item.buffer.numberOfChannels;channel++)for(let i=0;i<audioArrayBuffer.length;i++)audioArrayBuffer.getChannelData(channel)[i]=item.buffer.getChannelData(channel)[i];item.buffer=audioArrayBuffer,item.meta={...item.meta,length:audioArrayBuffer.length,duration:Number(audioArrayBuffer.length/masterSR).toFixed(3),startFrame:0,endFrame:audioArrayBuffer.length},dataset.start="0",dataset.end=`${audioArrayBuffer.length}`,renderEditPanelWaveform(item),item.waveform=!1}const toggleReadOnlyInput=inputId=>{const input=document.getElementById(inputId);input.readOnly?input.removeAttribute("readonly"):input.setAttribute("readonly",!0)};function updateFile(event){const target=event.target,item=getFileById(lastSelectedRow.dataset.id);target&&("editFileName"===target.id&&(item.file.name=target.value),"editFilePath"===target.id&&(item.file.path=target.value))}const showEditPanel=(event,id)=>{const editPanelEl=document.getElementById("editPanel"),editableItemsEl=document.getElementById("editableItems");let item;id&&(lastSelectedRow=getRowElementById(id),editPanelEl.dataset.id=id),item=getFileById(id||lastSelectedRow.dataset.id),editPanelEl.dataset.start="-1",editPanelEl.dataset.end="-1",editableItemsEl.innerHTML=`\n      <div class="input-set">\n      <label for="editFileName" class="before-input">File Name</label>\n      <input type="text" onchange="digichain.updateFile(event)" placeholder="Sample file name" id="editFileName" value="${getNiceFileName("",item,!0)}" readonly>\n      <button class="button-clear" onclick="digichain.toggleReadOnlyInput('editFileName')"><i class="gg-pen"></i></button>\n    </div><br>\n    <div class="input-set">\n    <label for="editFilePath" class="before-input">File Path</label>\n      <input type="text" placeholder="File path of the sample (if known)" id="editFilePath" value="${item.file.path}" id="editFilePath" readonly>\n      <button class="button-clear" onclick="digichain.toggleReadOnlyInput('editFilePath')"><i class="gg-pen"></i></button>\n    </div>\n  `,editPanelEl.classList.add("show"),renderEditPanelWaveform(item)};async function setWavLink(file,linkEl){const fileName=getNiceFileName("",file,!1,!0);let wav=audioBufferToWav(file.buffer,file.meta,masterSR*pitchModifier,masterBitDepth,masterChannels),blob=new window.Blob([new DataView(wav)],{type:"audio/wav"});if(1!==pitchModifier){let linkedFile=await fetch(URL.createObjectURL(blob)),arrBuffer=await linkedFile.arrayBuffer(),pitchedBuffer=await audioCtx.decodeAudioData(arrBuffer);wav=audioBufferToWav(pitchedBuffer,file.meta,masterSR,masterBitDepth,masterChannels),blob=new window.Blob([new DataView(wav)],{type:"audio/wav"})}return linkEl.href=URL.createObjectURL(blob),linkEl.setAttribute("download",fileName),blob}async function downloadAll(event){const _files=files.filter((f=>f.meta.checked)),flattenFolderStructure=event.shiftKey||modifierKeys.shiftKey,links=[],el=document.getElementById("getJoined");if(_files.length>5&&!zipDownloads){if(!confirm(`You are about to download ${_files.length} files, that will show ${_files.length} pop-ups one after each other..\n\nAre you ready for that??`))return}if(zipDownloads&&_files.length>1){const zip=new JSZip;for(const file of _files){const blob=await setWavLink(file,el);flattenFolderStructure?zip.file(getNiceFileName("",file,!1,!0),blob,{binary:!0}):zip.file(file.file.path+getNiceFileName("",file,!1),blob,{binary:!0})}return void zip.generateAsync({type:"blob"}).then((blob=>{const el=document.getElementById("getJoined");el.href=URL.createObjectURL(blob),el.setAttribute("download","digichain_files.zip"),el.click()}))}for(const file of _files){const link=await downloadFile(file.meta.id);links.push(link)}const intervalId=setInterval((()=>{const lnk=links.shift();lnk?.click(),0===links.length&&lnk&&clearInterval(intervalId)}),500)}async function downloadFile(id,fireLink=!1){const el=getRowElementById(id).querySelector(".wav-link-hidden"),file=getFileById(id);return await setWavLink(file,el),fireLink&&el.click(),el}function removeSelected(){metaFiles.removeSelected(),files.forEach((f=>f.meta.checked?f.source?.stop():"")),files=files.filter((f=>!f.meta.checked)),unsorted=unsorted.filter((id=>files.find((f=>f.meta.id===id)))),renderList()}function showInfo(){const description=document.querySelector("meta[name=description]").content;document.querySelector(".info-panel-md .content").innerHTML=`\n    <h3>DigiChain</h3>\n    <p>${description}</p>\n    <p class="float-right"><a href="https://brianbar.net/" target="_blank">Brian Barnett</a>\n    (<a href="https://www.youtube.com/c/sfxBrian" target="_blank">sfxBrian</a> / <a href="https://github.com/brian3kb" target="_blank">brian3kb</a>) </p>\n`,document.querySelector(".info-panel-md").classList.add("show")}function pitchExports(value){const octaves={2:1,4:2,8:3};[.25,.5,1,2,4,8].includes(+value)&&(pitchModifier=+value,infoEl.textContent=1===pitchModifier?"":`All exported samples will be pitched up ${octaves[pitchModifier]} octave${pitchModifier>2?"s":""}`,showExportSettingsPanel())}function toggleSetting(param){"zipDl"===param&&(zipDownloads=!zipDownloads,showExportSettingsPanel())}function showExportSettingsPanel(){document.querySelector(".export-settings-panel-md .content").innerHTML=`\n    <h4>Settings</h4>\n    <table style="padding-top:0;">\n    <thead>\n    <tr>\n    <th width="55%"></th>\n    <th></th>\n</tr>\n</thead>\n    <tbody>\n    <tr>\n    <td><span>Pitch up exported files by octave &nbsp;&nbsp;&nbsp;</span></td>\n    <td>    <button onclick="digichain.pitchExports(1)" class="check ${1===pitchModifier?"button":"button-outline"}">OFF</button>\n    <button onclick="digichain.pitchExports(2)" class="check ${2===pitchModifier?"button":"button-outline"}">1</button>\n    <button onclick="digichain.pitchExports(4)" class="check ${4===pitchModifier?"button":"button-outline"}">2</button>\n    <button onclick="digichain.pitchExports(8)" class="check ${8===pitchModifier?"button":"button-outline"}">3</button><br></td>\n</tr>\n<tr>\n<td><span>Download multi-file/joined downloads as one zip file? &nbsp;&nbsp;&nbsp;</span></td>\n<td><button onclick="digichain.toggleSetting('zipDl')" class="check ${zipDownloads?"button":"button-outline"}">${zipDownloads?"YES":"NO"}</button></td>\n</tr>\n</tbody>\n</table>\n  `,document.querySelector(".export-settings-panel-md").classList.add("show")}function getMonoFloat32ArrayFromBuffer(buffer,channel,getAudioBuffer=!1){let result=getAudioBuffer?audioCtx.createBuffer(masterChannels,buffer.length,masterSR):new Float32Array(buffer.length);if("S"===channel)for(let i=0;i<buffer.length;i++)(getAudioBuffer?result.getChannelData(0):result)[i]=(buffer.getChannelData(0)[i]+buffer.getChannelData(1)[i])/2;else{const _channel="R"===channel?1:0;for(let i=0;i<buffer.length;i++)(getAudioBuffer?result.getChannelData(0):result)[i]=buffer.getChannelData(_channel)[i]}return result}function joinToMono(audioArrayBuffer,_files,totalLength,largest,pad){let totalWrite=0;_files.forEach(((file,idx)=>{const bufferLength=pad?largest:file.buffer.length;let result=getMonoFloat32ArrayFromBuffer(file.buffer,file?.meta?.channel);for(let i=0;i<bufferLength;i++)audioArrayBuffer.getChannelData(0)[totalWrite]=result[i],totalWrite++}))}function joinToStereo(audioArrayBuffer,_files,totalLength,largest,pad){let totalWrite=0;_files.forEach(((file,idx)=>{const bufferLength=pad?largest:file.buffer.length;let result=[new Float32Array(file.buffer.length),new Float32Array(file.buffer.length)];for(let i=0;i<file.buffer.length;i++)result[0][i]=file.buffer.getChannelData(0)[i],result[1][i]=file.buffer.getChannelData(2===file.buffer.numberOfChannels?1:0)[i];for(let i=0;i<bufferLength;i++)audioArrayBuffer.getChannelData(0)[totalWrite]=result[0][i],audioArrayBuffer.getChannelData(1)[totalWrite]=result[1][i],totalWrite++}))}function mixDown(_files){const mixDownLength=_files.reduce(((big,cur)=>big>cur.buffer.length?big:cur.buffer.length),0),audioArrayBuffer=audioCtx.createBuffer(masterChannels,mixDownLength,masterSR);let totalWrite=0;_files.forEach(((file,idx)=>{const bufferLength=pad?largest:file.buffer.length;let result=[new Float32Array(file.buffer.length),new Float32Array(file.buffer.length)];for(let i=0;i<file.buffer.length;i++)result[0][i]=file.buffer.getChannelData(0)[i],result[1][i]=file.buffer.getChannelData(2===file.buffer.numberOfChannels?1:0)[i];for(let i=0;i<bufferLength;i++)audioArrayBuffer.getChannelData(0)[totalWrite]=result[0][i],audioArrayBuffer.getChannelData(1)[totalWrite]=result[1][i],totalWrite++}))}function joinAllUICall(event,pad){0!==files.length&&(document.getElementById("loadingText").textContent="Processing",document.body.classList.add("loading"),setTimeout((()=>joinAll(event,pad)),500))}async function joinAll(event,pad=!1,filesRemaining=[],fileCount=0,toInternal=!1,zip=!1){if(0===files.length)return;(toInternal||event.shiftKey||modifierKeys.shiftKey)&&(toInternal=!0),zipDownloads&&!toInternal&&(zip=zip||new JSZip);let _files=filesRemaining.length>0?filesRemaining:files.filter((f=>f.meta.checked)),tempFiles=_files.splice(0,sliceGrid>0?sliceGrid:_files.length);if(filesRemaining=Array.from(_files),_files=tempFiles,pad&&0!==sliceGrid&&0!==_files.length)for(;_files.length!==sliceGrid;)_files.push(_files[_files.length-1]);const largest=_files.reduce(((big,cur)=>big>cur.buffer.length?big:cur.buffer.length),0),totalLength=_files.reduce(((total,file)=>total+=pad?largest:file.buffer.length),0),audioArrayBuffer=audioCtx.createBuffer(masterChannels,totalLength,masterSR);1===masterChannels&&joinToMono(audioArrayBuffer,_files,totalLength,largest,pad),2===masterChannels&&joinToStereo(audioArrayBuffer,_files,totalLength,largest,pad);const joinedEl=document.getElementById("getJoined"),path=_files[0].file.path?`${(_files[0].file.path||"").replace(/\//gi,"-")}`:"",fileData={file:{name:1===_files.length?`${path}joined_${pad?"spaced_":""}${getNiceFileName("",_files[0],!0)}_${fileCount+1}--[${_files.length}].wav`:`${path}joined_${pad?"spaced_":""}${fileCount+1}--[${_files.length}].wav`},buffer:audioArrayBuffer,meta:{}};if(toInternal){const blob=await setWavLink(fileData,joinedEl),fileReader=new FileReader;fileReader.readAsArrayBuffer(blob),fileReader.fileCount=fileCount,fileReader.onload=e=>{audioCtx.decodeAudioData(e.target.result,(function(buffer){parseWav(buffer,{lastModified:(new Date).getTime(),name:1===_files.length?`${path}resample_${pad?"spaced_":""}${getNiceFileName("",_files[0],!0)}_${fileReader.fileCount+1}--[${_files.length}].wav`:`${path}resample_${pad?"spaced_":""}${fileReader.fileCount+1}--[${_files.length}].wav`,size:masterBitDepth*masterSR*(buffer.length/masterSR)/8*buffer.numberOfChannels/1024,type:"audio/wav"},"",!0,!1),renderList()}))}}else if(zip){const blob=setWavLink(fileData,joinedEl);zip.file(fileData.file.name,blob,{binary:!0})}else await setWavLink(fileData,joinedEl),joinedEl.click();filesRemaining.length>0?(fileCount++,joinAll(event,pad,filesRemaining,fileCount,toInternal,zip)):(zip&&zip.generateAsync({type:"blob"}).then((blob=>{joinedEl.href=URL.createObjectURL(blob),joinedEl.setAttribute("download","digichain_files.zip"),joinedEl.click()})),renderList())}function joinAllByPath(event,pad=!1){const filesByPath={};files.filter((f=>f.meta.checked)).forEach((file=>{const path=file.file.path.replace(/\//gi,"-");filesByPath[path]=filesByPath[path]||[],filesByPath[path].push(file)}));for(const fBP of filesByPath)joinAll(event,pad,fBP,fBP.length)}const stopPlayFile=(event,id)=>{const file=getFileById(id||lastSelectedRow.dataset.id);file.source&&file.source.stop()},playFile=(event,id,loop)=>{const file=getFileById(id||lastSelectedRow.dataset.id);loop=loop||event.shiftKey||modifierKeys.shiftKey||!1,file.source&&file.source.stop(),file.source=audioCtx.createBufferSource(),file.source.buffer=file.meta.channel&&1===masterChannels?getMonoFloat32ArrayFromBuffer(file.buffer,file.meta.channel,!0):file.buffer,file.source.connect(audioCtx.destination),file.source.loop=loop,file.source.start()},toggleCheck=(event,id)=>{try{const rowEl=getRowElementById(id),el=getRowElementById(id).querySelector(".toggle-check"),file=getFileById(id);event.preventDefault(),file.meta.checked=!file.meta.checked,file.meta.checked?el.classList.remove("button-outline"):el.classList.add("button-outline"),file.meta.checked?rowEl.classList.add("checked"):rowEl.classList.remove("checked"),file.meta.checked||file.source?.stop(),lastSort="",setCountValues()}catch(err){setCountValues()}},changeChannel=(event,id,channel)=>{const el=getRowElementById(id).querySelector(".channel-option-"+channel),file=getFileById(id);if(event.shiftKey||modifierKeys.shiftKey){return confirm(`Confirm setting all selected samples that are stereo to ${{L:"audio from the Left channel",R:"audio from the Right channel",S:"Sum both channels of audio to mono"}[channel]}?`)&&files.filter((f=>f.meta.checked)).forEach((f=>f.meta.channel=channel)),renderList()}file.meta.channel=channel,getRowElementById(id).querySelectorAll(".channel-options a").forEach((opt=>opt.classList.remove("selected"))),el.classList.add("selected")},invertFileSelection=()=>{0!==files.length&&(files.forEach((file=>file.meta.checked=!file.meta.checked)),renderList())},changeSliceOption=(targetEl,size,silent=!1)=>{let newValue=size;return silent||(newValue=prompt(`Change slice value "${size}" to what new value?`)),newValue&&!isNaN(newValue)&&(newValue=Math.abs(Math.ceil(+newValue)),sliceOptions[targetEl.dataset.sel]=+newValue,targetEl.textContent=newValue),+newValue},selectSliceAmount=(event,size)=>{if(event.target){if(event.ctrlKey||modifierKeys.ctrlKey)return 0===size?(DefaultSliceOptions.forEach(((option,index)=>changeSliceOption(document.querySelector(`.master-slices .sel-${index}`),option,!0))),sliceOptions=Array.from(DefaultSliceOptions),selectSliceAmount({shiftKey:!0},0)):selectSliceAmount({shiftKey:!0},changeSliceOption(event.target,size));if(sliceGrid=size,sliceOptions.forEach(((option,index)=>{const el=document.querySelector(`.master-slices .sel-${index}`);option===size?el.classList.remove("button-outline"):el.classList.add("button-outline")})),setCountValues(),0===size&&files.forEach((f=>f.source?.stop())),!event.shiftKey&&!modifierKeys.shiftKey){files.forEach((f=>f.meta.checked=!1));for(let i=0;i<(size<files.length?size:files.length);i++)toggleCheck(event,files[i].meta.id);renderList()}}},duplicate=(event,id)=>{const file=getFileById(id),fileIdx=getFileIndexById(id)+1,item={file:{...file.file}};item.buffer=new AudioBuffer({numberOfChannels:file.buffer.numberOfChannels,length:file.buffer.length,sampleRate:file.buffer.sampleRate});for(let channel=0;channel<file.buffer.numberOfChannels;channel++){const ogChannelData=file.buffer.getChannelData(channel);item.buffer.getChannelData(channel).set(ogChannelData)}item.meta=JSON.parse(JSON.stringify(file.meta)),item.meta.dupeOf=id,item.waveform=!1,item.meta.id=crypto.randomUUID(),files.splice(event.shiftKey||modifierKeys.shiftKey?files.length:fileIdx,0,item),unsorted.push(item.meta.id),renderList()},splitByOtSlices=(event,id,pushInPlace=!1,sliceSource="ot")=>{const file=getFileById(id),pushInPlaceItems=[];let otMeta;if(otMeta="transient"===sliceSource?metaFiles.getByFileName("---sliceToTransientCached---"):"ot"===sliceSource?metaFiles.getByFile(file):!!file.meta.customSlices&&file.meta.customSlices,otMeta){for(let i=0;i<otMeta.sliceCount;i++){const newLength=otMeta.slices[i].endPoint-otMeta.slices[i].startPoint;if(newLength<5)continue;const audioArrayBuffer=audioCtx.createBuffer(file.buffer.numberOfChannels,newLength,masterSR),slice={},uuid=crypto.randomUUID();slice.buffer=audioArrayBuffer,slice.file={...file.file},slice.meta={length:audioArrayBuffer.length,duration:Number(audioArrayBuffer.length/masterSR).toFixed(3),startFrame:0,endFrame:audioArrayBuffer.length,checked:!0,id:uuid,sliceNumber:`${file.meta.sliceNumber?file.meta.sliceNumber+"-":""}${i+1}`,slicedFrom:file.meta.id,channel:audioArrayBuffer.numberOfChannels>1?"L":""},file.buffer.getChannelData(0).slice(otMeta.slices[i].startPoint,otMeta.slices[i].endPoint).forEach(((a,idx)=>slice.buffer.getChannelData(0)[idx]=a)),2===file.buffer.numberOfChannels&&file.buffer.getChannelData(1).slice(otMeta.slices[i].startPoint,otMeta.slices[i].endPoint).forEach(((a,idx)=>slice.buffer.getChannelData(1)[idx]=a)),pushInPlace?pushInPlaceItems.push(slice):files.push(slice),unsorted.push(uuid)}pushInPlaceItems.length&&files.splice(getFileIndexById(id)+1,0,...pushInPlaceItems),renderList()}},splitEvenly=(event,id,slices,pushInPlace=!1)=>{const file=getFileById(id),frameSize=file.buffer.length/slices,pushInPlaceItems=[];for(let i=0;i<slices;i++){const audioArrayBuffer=audioCtx.createBuffer(file.buffer.numberOfChannels,frameSize,file.buffer.sampleRate),slice={},uuid=crypto.randomUUID();slice.buffer=audioArrayBuffer,slice.file={...file.file},slice.meta={length:audioArrayBuffer.length,duration:Number(audioArrayBuffer.length/masterSR).toFixed(3),startFrame:0,endFrame:audioArrayBuffer.length,checked:!0,id:uuid,sliceNumber:`${file.meta.sliceNumber?file.meta.sliceNumber+"-":""}${i+1}`,slicedFrom:file.meta.id,channel:audioArrayBuffer.numberOfChannels>1?"L":""},file.buffer.getChannelData(0).slice(i*frameSize,i*frameSize+frameSize).forEach(((a,idx)=>slice.buffer.getChannelData(0)[idx]=a)),2===file.buffer.numberOfChannels&&file.buffer.getChannelData(1).slice(i*frameSize,i*frameSize+frameSize).forEach(((a,idx)=>slice.buffer.getChannelData(1)[idx]=a)),pushInPlace?pushInPlaceItems.push(slice):files.push(slice),unsorted.push(uuid)}pushInPlaceItems.length&&files.splice(getFileIndexById(id)+1,0,...pushInPlaceItems),renderList()},splitByTransient=(file,threshold=.8)=>{const transientPositions=[],frameSize=file.buffer.length/64;let lastStart,lastEnd;for(let i=0;i<file.buffer.length;i++)void 0===lastStart?Math.abs(file.buffer.getChannelData(0)[i])>threshold&&(lastStart=i,i+=frameSize):void 0===lastEnd&&(0==Math.abs(file.buffer.getChannelData(0)[i]).toFixed(3)||i+frameSize>file.buffer.length)&&(lastEnd=i+frameSize>file.buffer.length?i:i+frameSize),void 0!==lastStart&&void 0!==lastEnd&&(transientPositions.push({startPoint:lastStart,loopPoint:lastStart,endPoint:lastEnd}),lastStart=void 0,lastEnd=void 0);let metaTransient=metaFiles.getByFileName("---sliceToTransientCached---");return metaTransient||(metaTransient={uuid:crypto.randomUUID(),name:"---sliceToTransientCached---",sliceCount:0,slices:[]},metaFiles.push(metaTransient)),metaTransient.slices=transientPositions,metaTransient.sliceCount=metaTransient.slices.length,metaTransient},splitSizeAction=(event,slices,threshold)=>{let file,otMeta;const sliceGroupEl=document.querySelector(".split-panel-options .slice-group"),optionsEl=document.querySelectorAll(".split-panel-options .slice-group button");"ot"===slices&&sliceGroupEl.dataset.id&&(file=getFileById(sliceGroupEl.dataset.id),otMeta=metaFiles.getByFile(file),slices=otMeta.slices),"transient"===slices&&sliceGroupEl.dataset.id?(file=getFileById(sliceGroupEl.dataset.id),otMeta=splitByTransient(file,+threshold/100),slices=otMeta.slices):metaFiles.removeByName("---sliceToTransientCached---"),optionsEl.forEach((option=>option.classList.add("button-outline"))),sliceGroupEl.dataset.sliceCount="number"==typeof slices?slices:otMeta.sliceCount,optionsEl.forEach(((option,index)=>{+option.dataset.sel==+sliceGroupEl.dataset.sliceCount&&!otMeta||"ot"===option.dataset.sel&&otMeta&&"---sliceToTransientCached---"!==otMeta.name||"transient"===option.dataset.sel&&otMeta&&"---sliceToTransientCached---"===otMeta.name?option.classList.remove("button-outline"):option.classList.add("button-outline")})),drawSliceLines(slices,file,otMeta)},remove=id=>{const fileIdx=getFileIndexById(id),removed=files.splice(fileIdx,1),unsortIdx=unsorted.findIndex((uuid=>uuid===id));unsorted.splice(unsortIdx,1),removed[0]&&metaFiles.removeByName(removed[0].file.name),renderList()},move=(event,id,direction)=>{const from=getFileIndexById(id);let item,to=1===direction?from+1:from-1;-1===to&&(to=files.length-1),to>=files.length&&(to=0),item=files.splice(from,1)[0],event.shiftKey||modifierKeys.shiftKey?from>to?files.splice(0,0,item):files.splice(files.length,0,item):files.splice(to,0,item),renderList()},sort=by=>{"id"===by?(files=unsorted.map((key=>files.find((f=>f.meta.id===key)))),lastSort=""):lastSort===by?files.reverse():(files="name"===by?files.sort(((a,b)=>a.file[by].localeCompare(b.file[by]))):files.sort(((a,b)=>a.meta[by]-b.meta[by])),lastSort=by),renderList()},handleRowClick=(event,id)=>{const row=getRowElementById(id);document.querySelector(".pop-up.show")||(lastSelectedRow&&lastSelectedRow.classList.remove("selected"),row.classList.add("selected"),lastSelectedRow=row,lastSelectedRow.scrollIntoViewIfNeeded(),setCountValues())},rowDragStart=event=>{event.target?.classList?.contains("file-row")&&(lastSelectedRow=event.target)},drawSliceLines=(slices,file,otMeta)=>{const _slices="number"==typeof slices?Array.from(".".repeat(slices)):slices,sliceLinesEl=document.getElementById("sliceLines"),waveformWidth=document.querySelector("#splitOptions .waveform-container").dataset.waveformWidth;let lines=[];if(file&&otMeta){let scaleSize=file.buffer.length/waveformWidth;lines=otMeta.slices.map(((slice,idx)=>`\n        <div class="line" style="margin-left:${slice.startPoint/scaleSize}px; width:${slice.endPoint/scaleSize-slice.startPoint/scaleSize}px;"></div>\n    `))}else lines=_slices.map(((slice,idx)=>`\n      <div class="line" style="margin-left:${waveformWidth/_slices.length*idx}px; width:${waveformWidth/_slices.length}px;"></div>\n  `));sliceLinesEl.innerHTML=lines.join("")},splitAction=(event,id,slices)=>{const el=document.getElementById("splitOptions"),fileNameEl=document.getElementById("splitFileName"),sliceGroupEl=document.querySelector(".split-panel-options .slice-group"),sliceByOtButtonEl=document.getElementById("sliceByOtButton"),sliceByTransientButtonEl=document.getElementById("sliceByTransientButton"),splitPanelWaveformContainerEl=(document.getElementById("transientThreshold"),document.querySelector("#splitOptions .waveform-container")),splitPanelWaveformEl=document.getElementById("splitPanelWaveform");let item,otMeta,pushInPlace=event.shiftKey||modifierKeys.shiftKey;if(id&&(lastSelectedRow=getRowElementById(id),sliceGroupEl.dataset.id=id),!0===slices&&(slices=sliceGroupEl.dataset.sliceCount),item=getFileById(id||lastSelectedRow.dataset.id),slices){if(id=id||item.meta.id,"ot"!==slices&&sliceByTransientButtonEl.classList.contains("button-outline")&&sliceByOtButtonEl.classList.contains("button-outline"))item.meta.customSlices?splitByOtSlices(0,id,pushInPlace,"custom"):splitEvenly(0,id,slices,pushInPlace);else{const sliceSource=sliceByTransientButtonEl.classList.contains("button-outline")?"ot":"transient";splitByOtSlices(0,id,pushInPlace,sliceSource)}return el.classList.remove("show")}otMeta=metaFiles.getByFile(item),fileNameEl.textContent=getNiceFileName("",item,!0),sliceByOtButtonEl.style.display=otMeta?"inline-block":"none",sliceByOtButtonEl.textContent=otMeta?`${otMeta.sliceCount}`:"OT",splitSizeAction(0,0),el.classList.add("show"),drawWaveform(item,splitPanelWaveformEl,item.meta.channel,{width:+splitPanelWaveformContainerEl.dataset.waveformWidth,height:128})},draw=(normalizedData,id,canvas,dimensions)=>{const drawLineSegment=(ctx,x,height,width,isEven)=>{ctx.lineWidth=1,ctx.strokeStyle="#a8a8a8",ctx.beginPath(),height=isEven?height:-height,ctx.moveTo(x,0),ctx.lineTo(x,height),ctx.arc(x+width/2,height,width/2,Math.PI,0,isEven),ctx.lineTo(x+width,0),ctx.stroke()};window.devicePixelRatio;canvas.width=dimensions?.width||150,canvas.height=dimensions?.height||60;const ctx=canvas.getContext("2d");ctx.translate(0,canvas.offsetHeight/2+0);const width=canvas.offsetWidth/normalizedData.length;for(let i=0;i<normalizedData.length;i++){const x=width*i;let height=normalizedData[i]/2*canvas.offsetHeight-0;height<0?height=0:height>canvas.offsetHeight/2&&(height=height>canvas.offsetHeight/2),drawLineSegment(ctx,x,height,width,(i+1)%2)}},secondsToMinutes=time=>{const mins=Math.floor(time/60),seconds=Number(time%60).toFixed(2);return mins>0?`${mins}m ${Math.round(+seconds)}s`:`${seconds}s`},setCountValues=()=>{const filesSelected=files.filter((f=>f.meta.checked)),selectionCount=filesSelected.length,filesDuration=files.reduce(((a,f)=>a+ +f.meta.duration),0),filesSelectedDuration=filesSelected.reduce(((a,f)=>a+ +f.meta.duration),0),joinCount=0===selectionCount?0:selectionCount>0&&sliceGrid>0?Math.ceil(selectionCount/sliceGrid):1;document.getElementById("fileNum").textContent=`${files.length}/${selectionCount}`,document.querySelector(".selection-count").textContent=` ${selectionCount||"-"} `,document.querySelectorAll(".join-count").forEach((el=>el.textContent=` ${0===joinCount?"-":joinCount} `)),document.getElementById("lengthHeaderLink").textContent=`Length (${secondsToMinutes(filesSelectedDuration)}/${secondsToMinutes(filesDuration)})`;try{document.querySelectorAll("tr").forEach((row=>row.classList.remove("end-of-grid"))),document.querySelectorAll("tr.checked").forEach(((row,i)=>(i+1)%sliceGrid==0?row.classList.add("end-of-grid"):row.classList.remove("end-of-grid")))}catch(e){}},getNiceFileName=(name,file,excludeExtension,includePath)=>{let fname=file?`${file.file.name.replace(/\.[^.]*$/,"")}${file.meta?.dupeOf?"-d":""}${file.meta?.sliceNumber?"-s"+file.meta.sliceNumber:""}.wav`:name.replace(/\.syx$|\.wav$/,"");return fname=includePath&&file.file.path?`${file.file.path.replace(/\//gi,"-")}`+fname:fname,excludeExtension?fname.replace(/\.[^.]*$/,""):fname},drawWaveform=(file,el,channel,dimensions)=>{let drawData=[],drawResolution=Math.floor(file.buffer.length/20);2===masterChannels&&file.buffer.numberOfChannels>1&&(channel="S"),drawResolution=drawResolution>4096?4096:drawResolution;for(let y=0;y<file.buffer.length;y+=Math.floor(file.buffer.length/drawResolution))"S"===channel?drawData.push((file.buffer.getChannelData(0)[y]+file.buffer.getChannelData(1)[y])/2):drawData.push(file.buffer.getChannelData("R"===channel?1:0)[y]);draw(drawData,file.meta.id,el,dimensions)},renderList=()=>{listEl.innerHTML=files.map((f=>`\n      <tr class="file-row ${f.meta.checked?"checked":""}" data-id="${f.meta.id}"\n          onclick="digichain.handleRowClick(event, '${f.meta.id}')"\n          onmousedown="digichain.handleRowClick(event, '${f.meta.id}')"  \n          ondragstart="digichain.rowDragStart(event)" draggable="true">\n        <td>\n            <i class="gg-more-vertical"></i>\n        </td>\n        <td class="toggle-td">\n            <button onclick="digichain.toggleCheck(event, '${f.meta.id}')" class="${f.meta.checked?"":"button-outline"} check toggle-check">&nbsp;</button>\n        </td>\n        <td class="move-up-td">\n            <button title="Move up in sample list." onclick="digichain.move(event, '${f.meta.id}', -1)" class="button-clear move-up"><i class="gg-chevron-up-r has-shift-mod-i"></i></button>\n        </td>\n        <td class="move-down-td">\n            <button title="Move down in sample list." onclick="digichain.move(event, '${f.meta.id}', 1)" class="button-clear move-down"><i class="gg-chevron-down-r has-shift-mod-i"></i></button>\n        </td>\n        <td class="waveform-td">\n            <canvas onclick="digichain.playFile(event, '${f.meta.id}')" class="waveform waveform-${f.meta.id}"></canvas>\n        </td>\n        <td class="file-path-td">\n            <span class="file-path">${f.file.path}</span>\n            <a title="Download processed wav file of sample." class="wav-link" onclick="digichain.downloadFile('${f.meta.id}', true)">${getNiceFileName(f.file.name)}</a>\n            ${f.meta.dupeOf?" d":""}\n            ${f.meta.sliceNumber?" s"+f.meta.sliceNumber:""}\n            <a class="wav-link-hidden" target="_blank"></a>\n        </td>\n        <td class="duration-td">\n            <span>${f.meta.duration} s</span>\n        </td>\n        <td class="channel-options-td">\n            <div class="channel-options has-shift-mod" style="display: ${f.buffer.numberOfChannels>1&&1===masterChannels?"block":"none"}">\n            <a title="Left channel" onclick="digichain.changeChannel(event, '${f.meta.id}', 'L')" class="${"L"===f.meta.channel?"selected":""} channel-option-L">L</a>\n            <a title="Sum to mono" onclick="digichain.changeChannel(event, '${f.meta.id}', 'S')" class="${"S"===f.meta.channel?"selected":""} channel-option-S">S</a>\n            <a title="Right channel" onclick="digichain.changeChannel(event, '${f.meta.id}', 'R')" class="${"R"===f.meta.channel?"selected":""} channel-option-R">R</a>\n            </div>\n            <div class="channel-options channel-options-stereo" title="${1===f.buffer.numberOfChannels?"Mono sample":"Stereo sample"}" style="display: ${2===masterChannels?"block":"none"}">\n                <i class="gg-shape-circle"></i>\n                <i class="gg-shape-circle stereo-circle" style="display: ${2===f.buffer.numberOfChannels?"inline-block":"none"}"></i>\n            </div>\n        </td>\n        <td class="split-td">\n            <button title="Slice sample." onclick="digichain.splitAction(event, '${f.meta.id}')" class="button-clear split gg-menu-grid-r ${metaFiles.getByFile(f)?"is-ot-file":""}"><i class="gg-menu-grid-r"></i></button>\n        </td>\n        <td class="duplicate-td">\n            <button title="Duplicate sample." onclick="digichain.duplicate(event, '${f.meta.id}')" class="button-clear duplicate"><i class="gg-duplicate has-shift-mod-i"></i></button>\n        </td>\n        <td class="toggle-edit-td">\n            <button title="Edit" onclick="digichain.showEditPanel(event, '${f.meta.id}')" class="button-clear toggle-edit"><i class="gg-pen"></i></button>\n        </td>\n        <td class="remove-td">\n            <button title="Remove sample (double-click)." ondblclick="digichain.remove('${f.meta.id}')" class="button-clear remove"><i class="gg-trash"></i></button>\n        </td>\n      </tr>\n    `)).join(""),0===files.length&&(listEl.innerHTML=""),document.querySelectorAll(".waveform").forEach(((el,i)=>{files[i].waveform?el.replaceWith(files[i].waveform):(drawWaveform(files[i],el,files[i].meta.channel),files[i].waveform=el)})),setCountValues(),document.body.classList.remove("loading")},bytesToInt=(bh,bm,bl)=>((127&bh)<<7<<7)+((127&bm)<<7)+(127&bl),parseOt=(fd,file,fullPath)=>{const uuid=file.uuid||crypto.randomUUID(),getInt32=values=>{const arr=new Uint8Array(values);return new DataView(arr.buffer).getInt32(0)};try{if(![70,79,82,77,0,0,0,0,68,80,83,49,83,77,80,65].every(((b,i)=>b===fd[i])))return{uuid:uuid,failed:!0};let slices=[],sliceCount=getInt32([fd[826],fd[827],fd[828],fd[829]]),t=58;for(let s=0;s<sliceCount;s++)44100===masterSR?slices.push({startPoint:getInt32([fd[t],fd[t+1],fd[t+2],fd[t+3]]),endPoint:getInt32([fd[t+4],fd[t+5],fd[t+6],fd[t+7]]),loopPoint:getInt32([fd[t+8],fd[t+9],fd[t+10],fd[t+11]])}):slices.push({startPoint:Math.round(getInt32([fd[t],fd[t+1],fd[t+2],fd[t+3]])/44100*masterSR),endPoint:Math.round(getInt32([fd[t+4],fd[t+5],fd[t+6],fd[t+7]])/44100*masterSR),loopPoint:Math.round(getInt32([fd[t+8],fd[t+9],fd[t+10],fd[t+11]])/44100*masterSR)}),t+=12;return metaFiles.push({uuid:uuid,name:file.name,path:fullPath,sliceCount:sliceCount,slices:slices}),unsorted.push(uuid),uuid}catch(err){return{uuid:uuid,failed:!0}}},parseSds=(fd,file,fullPath="",pushToTop=!1)=>{const uuid=file.uuid||crypto.randomUUID();try{if(240!==fd[0]||126!==fd[1]||1!==fd[3]||247!==fd[20])return{uuid:uuid,failed:!0};const bitRate=fd[6],sampleRate=10*Math.ceil(1e8/bytesToInt(fd[9],fd[8],fd[7])),length=bytesToInt(fd[12],fd[11],fd[10]);let loopStart=bytesToInt(fd[15],fd[14],fd[13]),loopEnd=bytesToInt(fd[18],fd[17],fd[16])+1;const loopType=fd[19];if(127===loopType&&(loopStart=loopEnd=length),sampleRate<4e3||sampleRate>96e3)return!1;if(16!==bitRate)return!1;let idx=fd.findIndex(((x,i)=>240===x&&126===fd[i+1]&&2===fd[i+3]&&247===fd[i+126])),lengthRead=0,data=[];for(;lengthRead<length;){for(let t=idx+5;t<idx+125&&lengthRead<length;t+=3)data[lengthRead++]=(fd[t]<<9|fd[t+1]<<2|fd[t+2]>>5)-32768;idx+=127}const resample=new Resampler(sampleRate,masterSR,1,data.filter((x=>void 0!==x)));resample.resampler(resample.inputBuffer.length);const audioArrayBuffer=audioCtx.createBuffer(1,resample.outputBuffer.length-resample.outputBuffer.length/120*5,masterSR);return resample.outputBuffer.filter((x=>void 0!==x)).forEach(((y,i)=>audioArrayBuffer.getChannelData(0)[i]=y/32767)),files[pushToTop?"unshift":"push"]({file:{lastModified:file.lastModified,name:file.name,path:fullPath.replace(file.name,""),size:file.size,type:file.type},buffer:audioArrayBuffer,meta:{length:resample.outputBuffer.length,loopStart:loopStart,loopEnd:loopEnd,loopType:loopType,duration:Number(resample.outputBuffer.length/masterSR).toFixed(3),startFrame:0,endFrame:resample.outputBuffer.length,checked:!0,id:uuid}}),unsorted.push(uuid),uuid}catch(err){return{uuid:uuid,failed:!0}}},parseWav=(audioArrayBuffer,file,fullPath="",pushToTop=!1,checked=!0)=>{const uuid=file.uuid||crypto.randomUUID();try{return files[pushToTop?"unshift":"push"]({file:{lastModified:file.lastModified,name:file.name,path:fullPath.replace(file.name,""),size:file.size,type:file.type},buffer:audioArrayBuffer,meta:{length:audioArrayBuffer.length,duration:Number(audioArrayBuffer.length/masterSR).toFixed(3),startFrame:0,endFrame:audioArrayBuffer.length,checked:checked,id:uuid,channel:audioArrayBuffer.numberOfChannels>1?"L":""}}),unsorted.push(uuid),uuid}catch(err){return{uuid:uuid,failed:!0}}},renderListWhenReady=(count,fileCount)=>{(count=count.filter((c=>!1!==c))).every((c=>unsorted.includes(c)))?renderList():setTimeout((()=>renderListWhenReady(count)),1e3)},setLoadingProgress=(count,total)=>{let progress=count/total*100;document.getElementById("loadingText").style.backgroundImage=`linear-gradient(90deg, #cf8600 ${progress}%, #606c76 ${progress+1}%, #606c76 100%)`},consumeFileInput=inputFiles=>{document.getElementById("loadingText").textContent="Loading samples",document.body.classList.add("loading");const _files=[...inputFiles].filter((f=>["syx","wav","flac"].includes(f?.name?.split(".")?.reverse()[0].toLowerCase())));if([...inputFiles].filter((f=>["ot"].includes(f?.name?.split(".")?.reverse()[0].toLowerCase()))).forEach(((file,idx)=>{const reader=new FileReader;reader.onload=function(e){if(file.uuid=crypto.randomUUID(),file.fullPath=file.fullPath||"",file.name.toLowerCase().endsWith(".ot")){const buffer=e.target.result,bufferByteLength=buffer.byteLength,bufferUint8Array=new Uint8Array(buffer,0,bufferByteLength);parseOt(bufferUint8Array,file,file.fullPath)}},reader.readAsArrayBuffer(file)})),0===_files.length)return renderList();const checkCount=idx=>{count.every((c=>unsorted.includes(c)))&&setTimeout((()=>renderListWhenReady(count)),1e3)};let count=[];_files.forEach(((file,idx)=>{const reader=new FileReader;reader.onload=function(e){if(file.uuid=crypto.randomUUID(),file.fullPath=file.fullPath||"",file.name.toLowerCase().endsWith(".syx")){const buffer=e.target.result,bufferByteLength=buffer.byteLength,bufferUint8Array=new Uint8Array(buffer,0,bufferByteLength);count.push(file.uuid);let result=parseSds(bufferUint8Array,file,file.fullPath);result.failed&&count.splice(count.findIndex((c=>c===result.uuid)),1),setLoadingProgress(idx+1,_files.length),checkCount(0,_files.length)}(file.name.toLowerCase().endsWith(".wav")||"audio/wav"===file.type||file.name.toLowerCase().endsWith(".flac"))&&(count.push(file.uuid),audioCtx.decodeAudioData(e.target.result,(data=>{let result=parseWav(data,file,file.fullPath);result.failed&&count.splice(count.findIndex((c=>c===result.uuid)),1),setLoadingProgress(idx+1,_files.length),checkCount(0,_files.length)})))},reader.readAsArrayBuffer(file)}))};uploadInput.addEventListener("change",(()=>consumeFileInput(uploadInput.files)),!1),document.body.addEventListener("dragover",(event=>{event.preventDefault()}),!1),document.body.addEventListener("drop",(event=>{if(event.preventDefault(),event?.dataTransfer?.items?.length&&"string"===event?.dataTransfer?.items[0].kind)try{return void event?.dataTransfer?.items[0].getAsString((async link=>{let linkedFile=await fetch(link);if(!linkedFile.url.includes(".wav"))return;let buffer=await linkedFile.arrayBuffer();await audioCtx.decodeAudioData(buffer,(data=>parseWav(data,{lastModified:(new Date).getTime(),name:linkedFile.url.split("/").reverse()[0],size:masterBitDepth*masterSR*(buffer.length/masterSR)/8*buffer.numberOfChannels/1024,type:"audio/wav"},"",!0))),renderList()}))}catch(e){}if(event?.dataTransfer?.items?.length){let toConsume=[],total=event.dataTransfer.items.length;toConsume.count=0;const addItem=item=>{if(item.isFile)item.file((file=>{file.fullPath=item.fullPath.replace("/",""),toConsume.push(file)})),toConsume.count++,total--;else if(item.isDirectory){item.createReader().readEntries((entries=>{total+=entries.length;for(const entry of entries)addItem(entry);total--}))}};for(const entry of event.dataTransfer.items){const itemAsEntry=entry.getAtEntry?entry.getAtEntry():entry.webkitGetAsEntry();itemAsEntry&&addItem(itemAsEntry)}let doneInterval=setInterval((()=>{total<=0&&toConsume.count===toConsume.length&&(clearInterval(doneInterval),consumeFileInput(toConsume))}),500)}else{let target=event.target;for(;!target.classList.contains("file-row");)target=target.parentElement||document.body,target="THEAD"===target.nodeName?document.querySelector("tr.file-row"):target,target=target===document.body?document.querySelector("tr.file-row:last-of-type"):target;if(target){let selectedRowId=getFileIndexById(lastSelectedRow.dataset.id),targetRowId=getFileIndexById(target.dataset.id),item=files.splice(selectedRowId,1)[0];files.splice(targetRowId,0,item),0===targetRowId?target.before(lastSelectedRow):target.after(lastSelectedRow)}}}),!1),document.body.addEventListener("keyup",(event=>{event.shiftKey||document.body.classList.remove("shiftKey-down"),event.ctrlKey||document.body.classList.remove("ctrlKey-down")})),document.body.addEventListener("keydown",(event=>{if(!keyboardShortcutsDisabled)if(event.shiftKey&&document.body.classList.add("shiftKey-down"),event.ctrlKey&&document.body.classList.add("ctrlKey-down"),"ArrowDown"!==event.code||lastSelectedRow&&lastSelectedRow.isConnected){if("Escape"===event.code)return!files.length||event.shiftKey||modifierKeys.shiftKey||files.forEach((f=>f.source?.stop())),document.querySelectorAll(".pop-up").forEach((w=>w.classList.remove("show")));if(![...document.querySelectorAll(".pop-up")].some((w=>w.classList.contains("show"))))if(files.length&&"KeyI"===event.code)0!==files.length&&(files.forEach((file=>file.meta.checked=!file.meta.checked)),renderList());else if("KeyH"===event.code&&(event.shiftKey||modifierKeys.shiftKey)&&toggleOptionsPanel(),"KeyG"===event.code&&(event.shiftKey||modifierKeys.shiftKey)&&(document.body.classList.contains("grid-view")?document.body.classList.remove("grid-view"):document.body.classList.add("grid-view")),["ArrowDown","ArrowUp","Escape","Enter","KeyG","KeyH","KeyI","KeyL","KeyP","KeyR","KeyS","KeyX"].includes(event.code)&&lastSelectedRow&&lastSelectedRow?.isConnected)if("ArrowDown"===event.code&&lastSelectedRow.nextElementSibling){if(!event.shiftKey&&!modifierKeys.shiftKey)return handleRowClick(0,lastSelectedRow.nextElementSibling.dataset.id);let idx=getFileIndexById(lastSelectedRow.dataset.id),item=files.splice(idx,1)[0];files.splice(idx+1,0,item),lastSelectedRow.nextElementSibling.after(lastSelectedRow),lastSelectedRow.scrollIntoViewIfNeeded(),setCountValues()}else if("ArrowUp"===event.code&&lastSelectedRow.previousElementSibling){if(!event.shiftKey&&!modifierKeys.shiftKey)return handleRowClick(0,lastSelectedRow.previousElementSibling.dataset.id);let idx=getFileIndexById(lastSelectedRow.dataset.id),item=files.splice(idx,1)[0];files.splice(idx-1,0,item),lastSelectedRow.previousElementSibling.before(lastSelectedRow),lastSelectedRow.scrollIntoViewIfNeeded(),setCountValues()}else if("Enter"===event.code)toggleCheck(event,lastSelectedRow.dataset.id);else if("KeyP"===event.code)playFile(event,lastSelectedRow.dataset.id);else if(1===masterChannels&&("KeyL"===event.code||"KeyR"===event.code||"KeyS"===event.code)){getFileById(lastSelectedRow.dataset.id).meta.channel&&changeChannel(event,lastSelectedRow.dataset.id,event.code.replace("Key",""))}}else lastSelectedRow=document.querySelector("#fileList tr")})),window.digichain={sliceOptions:sliceOptions,changeAudioConfig:changeAudioConfig,removeSelected:removeSelected,sort:sort,renderList:renderList,joinAll:joinAllUICall,selectSliceAmount:selectSliceAmount,showInfo:showInfo,toggleCheck:toggleCheck,move:move,playFile:playFile,stopPlayFile:stopPlayFile,downloadFile:downloadFile,downloadAll:downloadAll,changeChannel:changeChannel,duplicate:duplicate,remove:remove,handleRowClick:handleRowClick,rowDragStart:rowDragStart,splitAction:splitAction,splitEvenly:splitEvenly,splitSizeAction:splitSizeAction,toggleModifier:toggleModifier,toggleOptionsPanel:toggleOptionsPanel,showExportSettingsPanel:showExportSettingsPanel,showEditPanel:showEditPanel,pitchExports:pitchExports,normalize:normalize,trimRight:trimRight,perSamplePitch:perSamplePitch,reverse:reverse,toggleReadOnlyInput:toggleReadOnlyInput,toggleSetting:toggleSetting,updateFile:updateFile,changeEditPoint:changeEditPoint};